<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>碎碎念</title>
    <subtitle>吾心如花木，向阳而生，虽盛衰荣枯之异，然究终不离其性。</subtitle>
    <link rel="self" type="application/atom+xml" href="https://poltao.github.io/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://poltao.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-11-29T00:00:00+00:00</updated>
    <id>https://poltao.github.io/atom.xml</id>
    <entry xml:lang="en">
        <title>你遇到的最困难的x件事</title>
        <published>2024-11-29T00:00:00+00:00</published>
        <updated>2024-11-29T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://poltao.github.io/posts/difficult-things/"/>
        <id>https://poltao.github.io/posts/difficult-things/</id>
        
        <content type="html" xml:base="https://poltao.github.io/posts/difficult-things/">&lt;h2 id=&quot;1-shi-yong-cuo-wu-de-xian-cheng-mo-xing&quot;&gt;1. 使用错误的线程模型&lt;&#x2F;h2&gt;
&lt;p&gt;这是一个由于使用 &lt;code&gt;CompletableFuture.runAsync&lt;&#x2F;code&gt; 发起 Dubbo 调用而导致的问题。由于 &lt;code&gt;CompletableFuture.runAsync&lt;&#x2F;code&gt; 在未指定线程池参数时默认会使用 &lt;code&gt;ForkJoinPool.commonPool&lt;&#x2F;code&gt;，而 &lt;code&gt;ForkJoinPool&lt;&#x2F;code&gt; 的线程模型是基于工作窃取（work-stealing）的，线程会主动寻找并执行任务，这种模型适用于计算密集型任务，如并行计算、递归分解等。所以在 Dubbo 调用时，拦截器会拒绝服务，导致调用失败，频繁告警（内部框架逻辑，Dubbo 本身并无这个限制）。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;AsyncRun &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 普通的线程池
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;private static final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Executor &lt;&#x2F;span&gt;&lt;span&gt;normalExecutor = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;ThreadPoolExecutor&lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 线程池中的线程数
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 池中允许的最大线程数
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;L&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 当线程数大于核心线程数时，这是多余空闲线程在终止前等待新任务的最大时间
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;TimeUnit&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;SECONDS&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; keepAliveTime参数的时间单位
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;SynchronousQueue&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 在任务执行前用于保存任务的队列，此队列将仅保存由execute方法提交的Runnable任务
&lt;&#x2F;span&gt;&lt;span&gt;    );
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 基于工作窃取线程模型的线程池
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;private static final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Executor &lt;&#x2F;span&gt;&lt;span&gt;workStealingPool = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;ForkJoinPool&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;commonPool&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;public static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; list = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Lists&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;newArrayList&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;3&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;4&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;5&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;6&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;7&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;8&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;9&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;10&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; resultList = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;CopyOnWriteArrayList&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&amp;gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;CompletableFuture&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;?&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt; tasks = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Lists&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;partition&lt;&#x2F;span&gt;&lt;span&gt;(list, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;o &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;CompletableFuture&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;runAsync&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;                    resultList.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;add&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;StringUtils&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;(o, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;-&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;                }))
&lt;&#x2F;span&gt;&lt;span&gt;                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;toArray&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;CompletableFuture&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;[]&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;CompletableFuture&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;allOf&lt;&#x2F;span&gt;&lt;span&gt;(tasks).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; s : resultList) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(s);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; close pool
&lt;&#x2F;span&gt;&lt;span&gt;        ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;ThreadPoolExecutor&lt;&#x2F;span&gt;&lt;span&gt;) normalExecutor).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;shutdown&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        ((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;ForkJoinPool&lt;&#x2F;span&gt;&lt;span&gt;) workStealingPool).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;shutdown&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;上面的例子，简单演示了一波，使用 &lt;code&gt;CompletableFuture.runAsync&lt;&#x2F;code&gt; 批量运行多个异步任务的场景。在实际的业务场景中，我们可能会使用 &lt;code&gt;CompletableFuture.runAsync&lt;&#x2F;code&gt; 发起 Dubbo 调用，这时候就会遇到上面提到的问题。而解决这个问题的方法也很简单，只需要指定线程池参数即可。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;CompletableFuture&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;?&amp;gt; future = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;CompletableFuture&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;runAsync&lt;&#x2F;span&gt;&lt;span&gt;(() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;-&amp;gt; &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span&gt; s : list) {
&lt;&#x2F;span&gt;&lt;span&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(s);
&lt;&#x2F;span&gt;&lt;span&gt;            }
&lt;&#x2F;span&gt;&lt;span&gt;        }, normalExecutor);
&lt;&#x2F;span&gt;&lt;span&gt;future.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;join&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;2-shi-yong-log4j2-de-da-yin-da-dui-xiang-dao-zhi-cpu-biao-gao&quot;&gt;2. 使用 Log4j2 的打印大对象导致 CPU 飙高&lt;&#x2F;h2&gt;
&lt;p&gt;在使用 Log4j2 记录日志时，通常会使用 Jackson 的 &lt;code&gt;ObjectMapper&lt;&#x2F;code&gt; 将对象序列化为 JSON 字符串，然后再打印到日志文件中。但是，当对象过大时，序列化的过程会消耗大量的 CPU 资源，导致 CPU 飙高。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;public class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Log4j2Test &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;private static final &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Logger &lt;&#x2F;span&gt;&lt;span&gt;logger = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;LogManager&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;getLogger&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Log4j2Test&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;class&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Data
&lt;&#x2F;span&gt;&lt;span&gt;    @&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;AllArgsConstructor
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;public static class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Value &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;private &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span&gt;name;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;private int &lt;&#x2F;span&gt;&lt;span&gt;age;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;public static &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;String &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;toJson&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Object &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;obj&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;ObjectMapper&lt;&#x2F;span&gt;&lt;span&gt; objectMapper = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;ObjectMapper&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;try &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return&lt;&#x2F;span&gt;&lt;span&gt; objectMapper.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;writeValueAsString&lt;&#x2F;span&gt;&lt;span&gt;(obj);
&lt;&#x2F;span&gt;&lt;span&gt;        } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;catch &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Exception &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;toJson error&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, e);
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;null&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;public static void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;String&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;[] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;args&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; list = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Lists&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;newArrayList&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;张三&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;18&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Value&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;李四&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;));
&lt;&#x2F;span&gt;&lt;span&gt;        logger.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;info&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;list:{}&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;toJson&lt;&#x2F;span&gt;&lt;span&gt;(list));
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如上面代码所示，当 &lt;code&gt;list&lt;&#x2F;code&gt; 中的元素过多时，序列化的过程会消耗大量的 CPU 资源，导致 CPU 飙高。所以日常开发中，我们应该避免在日志中打印大对象。
最后对于 Java 程序，可以使用&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;async-profiler&#x2F;async-profiler&quot;&gt;async-profiler&lt;&#x2F;a&gt;这个低开销的采样分析器，来定位 CPU 飙高的问题。&lt;code&gt;async-profiler&lt;&#x2F;code&gt; 是一个功能强大的 Java 分析工具，通过低开销的采样技术和 HotSpot 特定 API，解决了传统分析器的 Safepoint 偏差问题。它不仅能够分析 Java 线程，还能监控非 Java 线程，并提供多维度的性能分析，适用于各种基于 HotSpot JVM 的 Java 运行时环境。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-java-dubbo-fu-wu-shi-yong-sentinel-jin-xing-xian-liu-ji-pai-dui-deng-dai-ce-lue&quot;&gt;3. Java Dubbo 服务使用 Sentinel 进行限流及排队等待策略&lt;&#x2F;h2&gt;
&lt;p&gt;在分布式系统中，服务限流是保障系统稳定性和可用性的重要手段之一。Java Dubbo 服务可以通过集成 Alibaba 开源的 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;alibaba&#x2F;Sentinel&quot;&gt;Sentinel 框架&lt;&#x2F;a&gt;，实现对发起调用方的限流，并在达到限流值时，采用排队等待策略，以避免系统过载。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4-shi-yong-redis-pipeline-fang-an-jian-shao-wang-luo-yan-chi-he-ti-gao-tun-tu-liang&quot;&gt;4. 使用 redis Pipeline 方案，减少网络延迟和提高吞吐量&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;批量请求-响应&lt;&#x2F;strong&gt;：管道操作允许客户端一次性发送多个命令到 Redis 服务器，然后一次性接收所有命令的响应。这种方式减少了网络往返次数，从而降低了网络延迟。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;减少网络开销&lt;&#x2F;strong&gt;：通过减少网络往返次数，管道操作显著降低了网络开销，提高了整体性能。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Jedis&lt;&#x2F;span&gt;&lt;span&gt; jedis = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Jedis&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;localhost&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;6379&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Pipeline&lt;&#x2F;span&gt;&lt;span&gt; pipeline = jedis.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pipelined&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;pipeline.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;key1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;pipeline.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;key2&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;pipeline.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;key3&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;List&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; responses = pipeline.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;syncAndReturnAll&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Object&lt;&#x2F;span&gt;&lt;span&gt; response : responses) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;System&lt;&#x2F;span&gt;&lt;span&gt;.out.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;println&lt;&#x2F;span&gt;&lt;span&gt;(response);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;jedis.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;close&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;通过合理选择和使用这两种操作方式，可以在不同的场景下优化 Redis 的性能和响应速度。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Understanding Linux CPU Load - when should you be worried?</title>
        <published>2024-11-20T00:00:00+00:00</published>
        <updated>2024-11-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://poltao.github.io/posts/linux-cpu-load/"/>
        <id>https://poltao.github.io/posts/linux-cpu-load/</id>
        
        <content type="html" xml:base="https://poltao.github.io/posts/linux-cpu-load/">&lt;blockquote&gt;
&lt;p&gt;原文：&lt;a href=&quot;https:&#x2F;&#x2F;scoutapm.com&#x2F;blog&#x2F;understanding-load-averages&quot;&gt;Understanding Linux CPU Load - when should you be worried?&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;1-bei-jing&quot;&gt;1. 背景&lt;&#x2F;h2&gt;
&lt;p&gt;你可能已经熟悉 Linux 的负载平均值，负载平均值是通过 &lt;code&gt;uptime&lt;&#x2F;code&gt; 和 &lt;code&gt;top&lt;&#x2F;code&gt; 命令显示的三个数字，它们看起来像这样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Load&lt;&#x2F;span&gt;&lt;span&gt; Avg: 1.91, 1.96, 2.15
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;大多数人大概知道负载平均值的含义：这三个数字分别代表不同时间段（1 分钟、5 分钟和 15 分钟）的平均值，数值越低越好，较高的数值表示问题或机器过载。但“好”和“坏”的负载平均值的阈值是多少？何时应关注负载平均值，以及何时触发告警通知以便于维护系统？&lt;&#x2F;p&gt;
&lt;p&gt;首先，简单介绍一下负载平均值的含义。我们从最简单的情况开始：一台只有一个单核处理器的机器。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;以交通流量为例类比&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;单核 CPU 就像一条单车道。想象你是桥梁操作员……有时你的桥梁非常繁忙，车辆排队等待通过。你想让人们知道桥梁上的交通状况。一个不错的指标是特定时间有多少车辆在等待。如果没有车辆等待，即将到来的司机知道他们可以立即通过。如果车辆排起长队，司机就知道他们会遇到延误。&lt;br &#x2F;&gt;
那么，桥梁操作员，你会使用什么编号系统？比如：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;0.00 表示桥上完全没有交通。&lt;&#x2F;strong&gt; 实际上，0.00 到 1.00 之间意味着没有拥堵，即将到来的车辆可以直接通过。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;1.00 表示桥梁正好达到容量。&lt;&#x2F;strong&gt; 一切仍然良好，但如果交通稍微加重，情况将会变慢。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;超过 1.00 表示有拥堵。&lt;&#x2F;strong&gt; 2.00 意味着总共有两车道的车辆——一车道在桥上，一车道在等待。3.00 意味着总共有三车道的车辆——一车道在桥上，两车道在等待。以此类推。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这基本上就是 CPU 负载的含义。“车辆”则是使用 CPU 时间片（“过桥”）或排队等待使用 CPU 的进程。Unix 把&lt;strong&gt;当前正在运行的进程数加上等待（排队）运行的进程数之和&lt;&#x2F;strong&gt;称之为运行队列长度。&lt;&#x2F;p&gt;
&lt;p&gt;像桥梁操作员一样，你希望你的车辆&#x2F;进程永远不需要等待。因此，你的 CPU 负载理想情况下应保持在 1.00 以下。如果偶尔超过 1.00，你还可以接受，但如果持续超过 1.00，你就需要担心了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-li-xiang-de-fu-zai-shi-1-00-ma&quot;&gt;2. 理想的负载是 1.00 吗？&lt;&#x2F;h2&gt;
&lt;p&gt;不完全是这样，针对单核 CPU，1.00 的负载问题在于没有太多的余量来应对突发情况，实际上，在一般情况下许多系统管理员会将 0.70 设置为理想负载的一个阈值，并总结有以下几个经验：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;“需要关注”&lt;&#x2F;strong&gt;：如果你的负载平均值持续高于 0.70，是时候调查了，以免情况恶化。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;“立即修复”&lt;&#x2F;strong&gt;：如果你的负载平均值持续高于 1.00，立即找到问题并修复。否则，你会在半夜被叫醒，那可不好玩。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;“Arrgh, it&#x27;s 3 AM WTF”&lt;&#x2F;strong&gt;：如果你的负载平均值高于 5.00，你可能有大麻烦了，你的机器要么挂了，要么慢得要命，而且这种情况（莫名其妙地）会在最糟糕的时间发生，比如半夜或你在会议上演讲时。别让它发展到那一步。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;3-duo-chu-li-qi-ni-wo-de-fu-zai-xian-shi-3-00-dan-yi-qie-yun-xing-zheng-chang&quot;&gt;3. 多处理器呢？我的负载显示 3.00，但一切运行正常！&lt;&#x2F;h2&gt;
&lt;p&gt;如果是四核处理器系统，那么负载 3.00 时，系统仍然健康。&lt;&#x2F;p&gt;
&lt;p&gt;在多处理器系统中，负载是相对于可用处理器核心数的。“100%利用率”在单核系统上是 1.00，双核系统上是 2.00，四核系统上是 4.00，以此类推。&lt;&#x2F;p&gt;
&lt;p&gt;回到桥梁类比，“1.00”实际上意味着“一条车道的交通量”。在单车道桥上，这意味着它满了。在双车道桥上，负载 1.00 意味着它处于 50%容量——只有一条车道满了，所以还有另一条车道可以填充。&lt;&#x2F;p&gt;
&lt;p&gt;CPU 也是一样：负载 1.00 在单核机器上是 100% CPU 利用率。在双核机器上，负载 2.00 是 100% CPU 利用率。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;4-duo-he-vs-duo-chu-li-qi&quot;&gt;4. 多核 vs. 多处理器&lt;&#x2F;h2&gt;
&lt;p&gt;既然我们谈到了这个话题，我们来聊聊多核和多处理器的区别。从性能角度来看，一台单个双核处理器的机器是否基本上等同于两台各有一个核心的处理器机器？是的，大致如此。这里有很多细微差别，比如缓存大小、处理器间进程切换频率等。尽管有这些细节，但对于评估 CPU 负载值的目的来说，重要的是总核心数，而不是这些核心分布在多少个物理处理器上。&lt;&#x2F;p&gt;
&lt;p&gt;这引出了两个新的经验法则：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;“核心数 = 最大负载”&lt;&#x2F;strong&gt;：在多核系统上，你的负载不应超过可用核心数。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;“核心就是核心”&lt;&#x2F;strong&gt;：核心如何分布在 CPU 上并不重要。两个四核 == 四个双核 == 八个单核。从这些目的来看，都是八个核心。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;5-zong-jie&quot;&gt;5. 总结&lt;&#x2F;h2&gt;
&lt;p&gt;对于 macos 可以使用如下命令查询 cpu 信息，我的机器信息如下所示：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;❯&lt;&#x2F;span&gt;&lt;span&gt; system_profiler SPHardwareDataType
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Hardware:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span&gt; Name: MacBook Pro
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span&gt; Identifier: Mac14,9
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Model&lt;&#x2F;span&gt;&lt;span&gt; Number: Z17K0009KCH&#x2F;A
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Chip:&lt;&#x2F;span&gt;&lt;span&gt; Apple M2 Pro
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Total&lt;&#x2F;span&gt;&lt;span&gt; Number of Cores: 12 (8 performance and 4 efficiency)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Memory:&lt;&#x2F;span&gt;&lt;span&gt; 32 GB
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;让我们看看此时 uptime 命令输出的负载平均值：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;❯&lt;&#x2F;span&gt;&lt;span&gt; uptime
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;14:12&lt;&#x2F;span&gt;&lt;span&gt;  up 100 days, 18:24, 1 user, load averages: 2.59 1.75 1.56
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;其中 2.59 是过去一分钟的平均值，1.75 是过去五分钟的平均值，1.56 是过去 15 分钟的平均值。这是在我 12 核 CPU 的机器上，显然我还有很多的余量，所以在负载持续超过 11 之前，我丝毫不担心。但我应该观察哪个平均值，一分钟、五分钟还是十五分钟？&lt;&#x2F;p&gt;
&lt;p&gt;结论就是&lt;font color=red&gt;应该关注五分钟或十五分钟的平均值。&lt;&#x2F;font&gt;坦白说，如果你的机器在一分钟平均值上超过 1.0（CPU 核心数），你仍然没事。当十五分钟平均值超过 1.0（CPU 核心数） 并持续时，你就需要立即行动了。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;6-tuo-zhan-yue-du&quot;&gt;6. 拓展阅读&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.zhihu.com&#x2F;question&#x2F;336683528&#x2F;answer&#x2F;3218878435&quot;&gt;Java 中线程池的线程数量如何确定？&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;TL;DR：没有固定答案，先设定预期，比如我期望的 CPU 利用率在多少，负载在多少，GC 频率多少之类的指标后，再通过测试不断的调整到一个合理的线程数。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;但是在实践中，询问者往往需要的是一个相对固定的答案，此时我们可以根据任务类型是 CPU 密集型任务还是 IO 密集型任务来设定线程数（其中 N 为 CPU 的个数）：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;如果是 CPU 密集型应用，则线程池大小可以设置为 N+1&lt;&#x2F;li&gt;
&lt;li&gt;如果是 IO 密集型应用，则线程池大小可以设置为 2N+1&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这个公式在一台服务器上只部署这一个应用并且只有这一个线程池时或许才合理，这也是为什么前面说没有固定答案的原因。但是，IO 优化中，这样的估算公式可能更适合：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;最佳线程数目 = （（线程等待时间+线程CPU时间）&#x2F; 线程CPU时间）* CPU核心数&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>几个有意思的设计问题以及解决方案</title>
        <published>2024-10-04T00:00:00+00:00</published>
        <updated>2024-10-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://poltao.github.io/posts/interview-design/"/>
        <id>https://poltao.github.io/posts/interview-design/</id>
        
        <content type="html" xml:base="https://poltao.github.io/posts/interview-design/">&lt;h2 id=&quot;1-she-ji-xian-cheng-an-quan-gao-xing-neng-de-hashmap&quot;&gt;1. 设计线程安全高性能的 HashMap&lt;&#x2F;h2&gt;
&lt;p&gt; 说实话从在接触这道面试题之前，我从未去思考或者了解过并发 HashMap 的实现原理，我可以脱口而出普通 HashMap 的底层实现原理，甚至可以说出 CPP STL 中两个 HashMap unordered_map 和 map 的区别以及优势和劣势，但是对于并发 HashMap 的实现原理，我一无所知。如果是面试中直接提问的话，以我不太聪明的样子，我应该能提出借助锁的方式来实现，但具体的实现方式在回答时，肯定是支支吾吾、顾左右而言他，在如今这个愈发内卷的求职市场，毫无疑问会被 Pass。&lt;&#x2F;p&gt;
&lt;p&gt;首先思考普通 HashMap 的实现原理，数据结构设计如下图所示：
&lt;img src=&quot;https:&#x2F;&#x2F;poltao.github.io&#x2F;posts&#x2F;interview-design&#x2F;normal_map.png&quot; alt=&quot;normal_map&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;我选择使用数据+链表的底层存储结构来实现 HashMap，数组用来快速定位和查找元素，链表用来解决哈希冲突的问题。同时为避免桶被多个 HashKey 映射到（即 hash 冲突很高），我们可以考虑在链表长度到达一定的阈值之后将其转化为红黑树，以提高查找效率。&lt;&#x2F;p&gt;
&lt;p&gt;接下来需要考虑如何设计线程安全的 HashMap, 如果仍旧使用上图所示的数据结构，在将其设计或者改造为线程安全的 HashMap&lt;br &#x2F;&gt;
时，有以下几个点需要重新考虑：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;由于 HashMap 底层未使用锁，所以在同时访问同一个 key 时，会发生 Data Race 的情况&lt;&#x2F;li&gt;
&lt;li&gt;由于我们会使用链表来作为底层的数据存储结构，多线程的情况下，可能会出现链表被破坏的情况（同时插入+删除同一个链表）&lt;&#x2F;li&gt;
&lt;li&gt;直接使用 std::mutex 来保证数据线程安全，会导致性能下降&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;改造为线程安全的 HashMap&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;一种显而易见的设计思路就是为 hash 表中的每一个表项设置单独的读写锁，来通过将锁的粒度细化来提高并发度。但是这样的设计会导致即使 hash 冲突不是太严重的情况下，也会导致性能的下降，因为每个表项都设置了一个读写锁。&lt;&#x2F;p&gt;
&lt;p&gt;所以我们可以考虑引入 CAS 来降低获取锁的开销，在读取数据、获取最新的链表头节点以及插入新的链表头节点时直接使用 CAS&lt;br &#x2F;&gt;
来保证线程安全，避免使用锁。这样对于设计良好，hash 冲突不是太严重的情况下，会大大减少获取锁导致的线程上下文切换开销。最终并发安全的 HashMap 设计如下图所示：
&lt;img src=&quot;https:&#x2F;&#x2F;poltao.github.io&#x2F;posts&#x2F;interview-design&#x2F;concur_map.png&quot; alt=&quot;concurrent_map&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;为了实现的方便，我们直接使用 atomic 类来实现相关的 CAS 操作。以下是一些关键函数的关键逻辑实现，先定义链表项如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;template &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;typename&lt;&#x2F;span&gt;&lt;span&gt; T&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Node &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;const&lt;&#x2F;span&gt;&lt;span&gt; std::string key_;
&lt;&#x2F;span&gt;&lt;span&gt;    std::atomic&amp;lt;T&amp;gt; value_;
&lt;&#x2F;span&gt;&lt;span&gt;    std::atomic&amp;lt;Node&amp;lt;T&amp;gt;*&amp;gt; next_;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; std::mutex mutex_;
&lt;&#x2F;span&gt;&lt;span&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;put 操作&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 1. 计算hash值，定位表项
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 2. 使用cas判断表项是否存在, 不存在的话直接构造链表插入到表头，此时不需要锁
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 3. 如果表项存在，需要加锁，然后遍历当前key是否存在，不存在插入到链表尾部，存在更新对应的值
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 4. 最后，如果关心 map的数量，可以累加计数器
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;get 操作&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 1. 计算hash值，定位表项
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 2. 直接遍历即可，因为使用了CAS，我们总是能保证读取到最新的链表节点数据，而不是脏数据。需要注意的是，使用时注意判空，因为在读取的过程中可能会有节点被删除
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 读操作不需要加锁
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;remove 操作&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 1. 计算hash值，定位表项
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 2. 找到对应的表项，先对表项对应的链表加锁，遍历找到节点之后，删除节点
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;扩容操作&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;cpp&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-cpp &quot;&gt;&lt;code class=&quot;language-cpp&quot; data-lang=&quot;cpp&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 1. 申请当前 size 倍数大小的存储空间
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 2. 可以在有新的put&#x2F;delete 操作时触发扩容操作，直到表项迁移完成
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 3. 如此，当触发扩容操作时，可以让多个线程同时对不同表项进行数据迁移，以提升效率
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;2-she-ji-yi-ge-ji-yu-nei-cun-de-xiao-xi-xiao-fei-dui-lie&quot;&gt;2. 设计一个基于内存的消息消费队列&lt;&#x2F;h2&gt;
&lt;p&gt;题目的要求可以总结为以下几个点：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;CPU 计算资源尽可能少，内存可以认为无限，且输出数据的延迟尽可能低。要求我们要尽可能快的读取生产的数据，并使用高效的排序算法，及时将数据写入到下游同步队列中&lt;&#x2F;li&gt;
&lt;li&gt;限制输入队列中的位置序号和输出队列中的位置序号之差不超过 10 万。这说明我们每一个批次处理的数据最多为 10 万条&lt;&#x2F;li&gt;
&lt;li&gt;模块内部最多只能创建 10 个线程，说明系统的资源是有限的，我们需要合理的利用资源，最好让系统可配置化&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;结合以上这几点，我的设计思路如下：
&lt;img src=&quot;https:&#x2F;&#x2F;poltao.github.io&#x2F;posts&#x2F;interview-design&#x2F;queue_1.png&quot; alt=&quot;queue&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;图中的设计模型可以简单概括为，一个 reader thread 负责从生产者同步队列按批次读取数据，每个批次的数据（&lt;code&gt;m=10w&lt;&#x2F;code&gt;）分为多个块，块的数目由 worker 工作线程的数目（n）来决定，故每个块的大小应该 = &lt;code&gt;m&#x2F;n&lt;&#x2F;code&gt;，之后在 worker 线程内部我们局部针对这个独立的块进行排序。最终每个 worker 将排序之后的数据存储到循环队列里面，循环队列设计为每 3 项存储一个批次的数据，每一项保证内部有序。&lt;br &#x2F;&gt;
此后，writer thread 使用大小为 n 的优先队列多路归并排序一个批次内所有的元素并且把他们一一发送到消费者同步队列供其他业务方使用。&lt;&#x2F;p&gt;
&lt;p&gt;值得注意的是我们在 worker 内部也设置了缓存队列，这意味着，reader 无须等待数据全部被排序处理就可以继续读取下一个批次的数据。后续引入循环队列的目的也是类似的思路，让 reader, worker, writer 三个主要的组件异步执行可以极大的扩展系统的性能。&lt;&#x2F;p&gt;
&lt;p&gt;以上应该可以应对大部分并发场景下的业务，下面是将 reader 线程改造为多线程读取模式的一点思考：）
&lt;img src=&quot;https:&#x2F;&#x2F;poltao.github.io&#x2F;posts&#x2F;interview-design&#x2F;queue_2.png&quot; alt=&quot;queue&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;假设现在每批次我们直接写入最大的 10 万条数据，那么我们可以将数据分为两个阶段来处理，我的主要实现思路如下：&lt;&#x2F;p&gt;
&lt;p&gt;1.&lt;strong&gt;启动 n 个读取数据线程&lt;&#x2F;strong&gt;，则每个线程每一个批次应该读取的数据是 &lt;code&gt;y=10w&#x2F;n&lt;&#x2F;code&gt;，然后我们将该批次的 y 个数据存入一个独立的优先队列中（本质是用 weight 做排序的小根堆）&lt;&#x2F;p&gt;
&lt;p&gt;如图中所示，取 n=3，则 &lt;code&gt;y=3.3w≈420kb&lt;&#x2F;code&gt;，然后将这个队列的数据存储到如 p2 所示的优先队列数组里面，其中每一个读取数据线程存放数据的位置是有规律的，以第 0 个线程为例，每批次存放数据的位置是 &lt;code&gt;0, 3, 6, 9, 12, ...&lt;&#x2F;code&gt; ，第 1 个线程存放的位置是 &lt;code&gt;1, 4, 7, 10, 13, ...&lt;&#x2F;code&gt;，以此类推。需要注意的时如果当前批次的数据量不足 &lt;code&gt;y&lt;&#x2F;code&gt;，则直接将数据存入到优先队列中，不需要等待。&lt;&#x2F;p&gt;
&lt;p&gt;但考虑到线程调度的不确定性，势必要通过一些同步措施确保当前批次数据在 n 个数据读取线程中分布均匀，具体效率如何仍旧存疑，未必高于单线程读取数据。&lt;&#x2F;p&gt;
&lt;p&gt;2.据 1 中的描述，我们需要&lt;strong&gt;将优先队列数组设置为一个循环数组&lt;&#x2F;strong&gt;，来保护内存。同时需要记录读取完毕和写入完毕的数据批次，据此，可以计算出读取数据线程要写入数据的索引位置，以及 write thread 线程要读取发送数据的偏移量。&lt;&#x2F;p&gt;
&lt;p&gt;3.&lt;strong&gt;启动一个 write thread 线程&lt;&#x2F;strong&gt;，该线程负责将优先队列中的数据进行排序，然后写入到消费者队列中，因为优先队列本身已经有序，所以我们可以直接基于多路归并的思路按 weight 的值从小到大合并数据，然后写入到消费者队列中，性能不受影响。需要注意的是，我们每次读取数据时要确保当前处理批次下优先队列数组里面有值才去处理，同时需要释放上一批次的数据。&lt;&#x2F;p&gt;
&lt;p&gt;4.基于以上设计，我们可以动态调整每批次要写入的最大数据量以及读取数据线程的数量，以适应不同的场景使用条件。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-xu-shui-chi-chou-yang-suan-fa&quot;&gt;3. 蓄水池抽样算法&lt;&#x2F;h2&gt;
&lt;p&gt;当然面试的时候一般提问方式是：给定一个未知大小的数据流，如何从中随机抽取 k 个数据，要求每个数据被抽取的概率相等。这个问题的解决方案就是著名的&lt;a href=&quot;https:&#x2F;&#x2F;www.jianshu.com&#x2F;p&#x2F;7a9ea6ece2af&quot;&gt;蓄水池抽样算法&lt;&#x2F;a&gt;，自然我是既没见过也没想出来啦。
此处做一个上述博客算法内容的简单备份，蓄水池抽样算法的核心如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;java&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-java &quot;&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int[]&lt;&#x2F;span&gt;&lt;span&gt; reservoir = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[m];
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; init
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; i &amp;lt; reservoir.length; i++)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    reservoir[i] = dataStream[i];
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; i = m; i &amp;lt; dataStream.length; i++)
&lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 随机获得一个[0, i]内的随机整数
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; d = rand.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;nextInt&lt;&#x2F;span&gt;&lt;span&gt;(i + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 如果随机整数落在[0, m-1]范围内，则替换蓄水池中的元素
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;(d &amp;lt; m)
&lt;&#x2F;span&gt;&lt;span&gt;    {
&lt;&#x2F;span&gt;&lt;span&gt;        reservoir[d] = dataStream[i];
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;算法的精妙之处在于：&lt;strong&gt;当处理完所有的数据时，蓄水池中的每个数据都是以 m&#x2F;N 的概率获得的&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>09.22-09.27 周计划</title>
        <published>2024-09-21T00:00:00+00:00</published>
        <updated>2024-09-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://poltao.github.io/posts/mini-lsmt/pre-index/"/>
        <id>https://poltao.github.io/posts/mini-lsmt/pre-index/</id>
        
        <content type="html" xml:base="https://poltao.github.io/posts/mini-lsmt/pre-index/">&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Mini-LSM Week 1: &lt;a href=&quot;https:&#x2F;&#x2F;skyzh.github.io&#x2F;mini-lsm&#x2F;week1-overview.html&quot;&gt;build an LSM-based key-value store.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
Working&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
OpenSource&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>令人沮丧的开源之旅和生活</title>
        <published>2024-09-20T00:00:00+00:00</published>
        <updated>2024-09-20T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://poltao.github.io/posts/opensource-and-life/"/>
        <id>https://poltao.github.io/posts/opensource-and-life/</id>
        
        <content type="html" xml:base="https://poltao.github.io/posts/opensource-and-life/">&lt;h2 id=&quot;1-ling-ren-ju-sang-de-kai-yuan-zhi-lv&quot;&gt;1. 令人沮丧的开源之旅&lt;&#x2F;h2&gt;
&lt;p&gt; 从 2023.11.14 日开始参与开源项目&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;GreptimeTeam&#x2F;greptimedb&quot;&gt;GreptimeDB&lt;&#x2F;a&gt;提交第一个 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;GreptimeTeam&#x2F;greptimedb&#x2F;pull&#x2F;2748&quot;&gt;PR&lt;&#x2F;a&gt; 至今天 2024.09.20，我仅仅只提交并合并了屈指可数的 12 个 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;GreptimeTeam&#x2F;greptimedb&#x2F;pulls?q=is%3Apr+author%3Apoltao+is%3Aclosed&quot;&gt;PR&lt;&#x2F;a&gt;，而且大多在我看来都是一些可有可无的提交。尽管所有的 PR 均已经被合并，但除了在看到自己的 PR 被合并的时候会有些微的成就感之外，剩下的还是我麻木的内心。&lt;&#x2F;p&gt;
&lt;p&gt; 其实我很清楚之所以有这种失落感是因为我本身参与开源，并不是基于自己的需求来驱动的，尤其是时间序列数据库这个领域和我当前的工作毫无关联，本质上是一种技术投机（从&lt;a href=&quot;https:&#x2F;&#x2F;www.tisonkun.org&#x2F;&quot;&gt;@tison&lt;&#x2F;a&gt;大佬哪儿偷学到的一个词）。而投机的对象是什么哩，毫不避讳的讲就是为了在简历上多一行开源项目的经历，尤其是基础设施领域的开源项目，因为尽管我现在的职位本身是业务开发，但是渴望从事基础设施领域工作的愿望一直还在，还想继续垂死挣扎一下，哈哈哈：）&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-can-yu-kai-yuan-zhi-wo-de-shou-huo&quot;&gt;2. 参与开源之我的收获&lt;&#x2F;h2&gt;
&lt;p&gt;其实完全可以列个 TODO 让我来更清楚的审视一下自己：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
揭开了云时代数据库构建的神秘面纱，尤其在开源组件赋能下的数据库构建竟然可以如此的快速。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
对存算分离的架构第一次有了清新而脱俗的认知，也算是理解了为啥 &lt;a href=&quot;https:&#x2F;&#x2F;xuanwo.io&#x2F;&quot;&gt;@Xuanwo&lt;&#x2F;a&gt;大佬要构建&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;apache&#x2F;opendal&quot;&gt;OpenDAL&lt;&#x2F;a&gt;。顺带一提，当初之所以没有继续贡献 OpenDAL 就是感觉对自己完全没啥用，lol。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
第一次认识和了解到了 Parquet 列式存储，Datafusion，Arrow 等看似高深，实则实现一点也不简单的优秀开源项目，我愿称之为人类开源智慧结晶。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
算是勉强搞懂了 WAL，Raft，ETCD 等一些在实现分布式存储时候必须要了解的一些概念，虽然还是一知半解就是了。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;&#x2F;&gt;
最后的最后，我竟然感觉自己的 Rust 语言水平有了些许的进步，竟然感觉自己能写 Rust 项目了，希望不是错觉，哈哈：）&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt; 大体上编程方面我暂时能想起来的收获也就是这些了吧，个人的碎碎念莫过如此，随着时间过的越久，我发现还是把这些东西记录下来会比较好，以前总是懒的记录自己不经意间的一个个想法，觉得毫无必要，但现在想想还是蛮有趣的，尤其是在看了自己 &lt;a href=&quot;https:&#x2F;&#x2F;x.com&#x2F;3tabs&quot;&gt;X&lt;&#x2F;a&gt; 上一些历史的帖子之后，如下面这个帖子是我在看到一篇文章后转的，尽管过去这么长时间了，我竟然还记得。
&lt;img src=&quot;https:&#x2F;&#x2F;poltao.github.io&#x2F;posts&#x2F;opensource-and-life&#x2F;arrow.png&quot; alt=&quot;Arrow&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-ku-zao-fa-wei-de-sheng-huo&quot;&gt;3. 枯燥乏味的生活&lt;&#x2F;h2&gt;
&lt;p&gt; 我怀疑自己是否有抑郁症，但我其实心里很清楚，无非就是想找对象了，这是否能佐证我起码还是个正常人？lol&lt;&#x2F;p&gt;
&lt;p&gt; 当然工作上的劳累固然让人觉得暗无天日，但多次面试无法通过更加令人沮丧，我甚至不知道自己是否真的能力不足，还是什么其他的问题。在面试过程中，让人最难受的一个场景无非是：HR 沟通的时候说用人部门通过了简历筛选，但是在真正面试的时候发现面试官完全没了解过你的简历，在面试的过程中也许是发现候选人业务经历不匹配或者说嫌你没相关经验（我猜测），而用一些比较敷衍的问题拖到指定时间就结束了，从此杳无音讯。&lt;&#x2F;p&gt;
&lt;p&gt; 当然也有一些面试的体验非常 nice，让我影响最深刻的是某初创公司的一二面面试官，他们竟然会真的有看简历上的 GitHub，这是让人真的感到非常兴奋的一件事，因为诸如上文描述的用人部门面试官未提前了解候选人简历而直接面试的情况实在是太多了。此外，get 了 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;LKI&quot;&gt;@LKI&lt;&#x2F;a&gt; 大佬的个人博客 &lt;a href=&quot;https:&#x2F;&#x2F;liriansu.com&#x2F;&quot;&gt;liriansu.com&lt;&#x2F;a&gt;，其中的技术相关文章暂且不表（因为我没看 🐶），但日常的博客，透漏出一种生活的温馨气息，给了我很大的触动。&lt;&#x2F;p&gt;
&lt;p&gt; 当然也不都是令人沮丧的事情，让我高兴的是，在生日当天竟然收到了喜欢过的菇凉的消息，要请我喝奶茶，这真是让人感动，她竟然还记得我的生日。但我当时刚好在家，只能遗憾的说下次。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Hope for a better tomorrow.&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Send &amp; Mutex: Misconceptions about Send</title>
        <published>2024-06-04T00:00:00+00:00</published>
        <updated>2024-06-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://poltao.github.io/posts/sync-and-mutex/"/>
        <id>https://poltao.github.io/posts/sync-and-mutex/</id>
        
        <content type="html" xml:base="https://poltao.github.io/posts/sync-and-mutex/">&lt;blockquote&gt;
&lt;p&gt;原文：&lt;a href=&quot;https:&#x2F;&#x2F;cryptical.xyz&#x2F;rust&#x2F;send-mutex&quot;&gt;Send &amp;amp; Mutex - Misconceptions about Send&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Author: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;ozgunozerk&quot;&gt;Özgün Özerk&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;1-bei-jing-jie-shao&quot;&gt;1. 背景介绍&lt;&#x2F;h2&gt;
&lt;p&gt; 在 Rust 中，想要实现一个类型的值在不同的线程或者异步任务中正常使用（确切的来说应该是无 data race 的读写），该类型必须实现两个标记
Trait: Send+Sync。而作者这篇文章旨在通过一系列的例子，来指明在某种程度上我们对 Send Trait 存在的误解，即 Send
应该指的：是不同的线程在不同的时间安全的使用；而不是我们下意识认为的：将一个类型的值从一个线程发送到另外一个线程。借此回答了作者在
Reddit 上看到的一个有趣的问题：&lt;font color=red&gt;为什么 Mutex&amp;lt;T&amp;gt; 想要保证线程安全就必须确保类型 T 实现了 Send Trait？&lt;&#x2F;font&gt;&lt;&#x2F;p&gt;
&lt;p&gt;首先可以通过两个简单的例子，来窥探一下，实现了 Send+Sync 的类型和未实现的类型，在 Rust 异步任务中的编译情况：&lt;&#x2F;p&gt;
&lt;div style=&quot;display: flex; justify-content: space-between; align-items: center;&quot;&gt;
    &lt;img src=&quot;no_sync_demo.png&quot; alt=&quot;No Sync Demo&quot; style=&quot;max-width: 52%; height: auto;&quot;&gt;
    &lt;img src=&quot;sync_demo.png&quot; alt=&quot;Sync Demo&quot; style=&quot;max-width: 48%; height: auto;&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;如上图所示，no_sync_demo 展示了在异步任务中使用了未实现 Sync 的数据结构 Rc，从而导致程序无法通过编译。而在 sync_demo
中我们切换为了线程安全的 Arc，从而使得代码可以正常运行。究其原因是因为 Arc 实现了 Send + Sync 两个
Trait，如下所示（11、13 行）：&lt;&#x2F;p&gt;
&lt;pre data-linenos data-lang=&quot;rust&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;Arc&amp;lt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;2&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    T: &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f2777a;color:#272b33;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;Sized,
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;3&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    #[unstable(feature = &amp;quot;allocator_api&amp;quot;, issue = &amp;quot;32838&amp;quot;)] A: Allocator = Global,
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;4&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;5&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    ptr: NonNull&amp;lt;ArcInner&amp;lt;T&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;6&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    phantom: PhantomData&amp;lt;ArcInner&amp;lt;T&amp;gt;&amp;gt;,
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;7&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;    alloc: A,
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;8&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;9&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;10&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;stable&lt;&#x2F;span&gt;&lt;span&gt;(feature = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;rust1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, since = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;1.0.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;11&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;unsafe impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f2777a;color:#272b33;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;Sized + Sync + Send, A: Allocator + Send&amp;gt; Send for Arc&amp;lt;T, A&amp;gt; {}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;12&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;13&lt;&#x2F;td&gt;&lt;td&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;stable&lt;&#x2F;span&gt;&lt;span&gt;(feature = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;rust1&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, since = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;1.0.0&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;tr&gt;&lt;td&gt;14&lt;&#x2F;td&gt;&lt;td&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;unsafe impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f2777a;color:#272b33;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;Sized + Sync + Send, A: Allocator + Sync&amp;gt; Sync for Arc&amp;lt;T, A&amp;gt; {}
&lt;&#x2F;span&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;2-send-sync-intro&quot;&gt;2. Send &amp;amp; Sync (intro)&lt;&#x2F;h2&gt;
&lt;p&gt;这是由编译器自动实现的两个标记 Trait，他们用来指定一个类型可以在并发编程模型下安全使用而不会产生 Data
Race。我们很容易找到两者的官方文档定义：&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nomicon&#x2F;send-and-sync.html#send-and-sync&quot;&gt;Send and Sync&lt;&#x2F;a&gt;
，但仍旧有些晦涩难懂。相对应的，&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;users&#x2F;2644842&#x2F;jonathan-giddy&quot;&gt;Jonathan Giddy&lt;&#x2F;a&gt;
在 stackoverflow 上的&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;a&#x2F;60109068&#x2F;14075443&quot;&gt;这个回答&lt;&#x2F;a&gt;要更加的直观：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Sync allows an object to be used by two threads A and B at the same time.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;Send allows an object to be used by two threads A and B at different times.&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;同时老哥还详细介绍了一下 Rc 和 Arc 的区别，以及为什么 Rc 不是线程安全的。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;大多数类型都是实现了 Send 的，但 Rc 是一个例外，因为 Rc 允许一个值有多个所有者，然而其底层的引用计数又是非原子操作的，在多线程环境下同步操作引用计数可能会导致不符合预期的结果，所以 Rc 不是线程安全的。&lt;&#x2F;p&gt;
&lt;p&gt;Arc 是使用了原子类型实现了引用计数的 Rc，所以是线程安全的。此外如果 Arc 指向的数据是 Sync 的，那么整个对象也应该是 Sync 的。而如果某个对象不是 Sync 的，我们可以尝试使用 Mutex 包裹起来，从而使其变得线程安全。因此在异步 Rust 编程中，我们会看到大量的 Arc&amp;lt;Mutex&amp;lt;T&amp;gt;&amp;gt;类型的变量。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;作者之所以在这篇文章中特意引入了这个非官方的定义，而不是官方的：&lt;font color=&#x27;red&#x27;&gt;A type is Send if it is safe to send it to another thread，&lt;&#x2F;font&gt;是因为他认为这个解释会带来一些误解。而事实也确实如此，我此前一直认为 Send 意味着将一个类型的值从一个线程发送到另外一个线程，但实际上这并不是 Send 的真正含义。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-1-sync-intro&quot;&gt;2.1 Sync Intro&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Say, you have a string.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
And you want to share this string with multiple threads.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
If more than one thread tries to modify the same string at the same time, you will get a data race.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;根据上面这个例子可以看到，Sync 的工作机制和 Rust 的 borrow checker 有些类似，它确保了一个类型可以被多个线程同时访问，但是不允许多个线程同时修改（在无任何同步机制的情况下）。显然对于 String 我们可以在多个线程之间共享读而不会出现问题，因为 borrow checker 不会允许在存在不可变引用的情况下去获取到可变引用。所以 String 是 Sync 的，并且 Rust 中几乎所有的类型都是 Sync 的。&lt;&#x2F;p&gt;
&lt;p&gt;那什么类型是非 Sync 的呢？官方文档的&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;marker&#x2F;trait.Sync.html#:~:text=Types%20that%20are%20not%20Sync%20are&quot;&gt;回答&lt;&#x2F;a&gt;如下：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Types that are not Sync are those that have “interior mutability” in a non-thread-safe form, such as Cell and RefCell. These types allow for mutation of their contents even through an immutable, shared reference. For example the set method on Cell&lt;T&gt; takes &amp;amp;self, so it requires only a shared reference &amp;amp;Cell&lt;T&gt;. The method performs no synchronization, thus Cell cannot be Sync.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;可以看到拥有内部可变性的类型，比如 Cell 和 RefCell，由于允许通过不可变引用来修改其内容，可以绕过 borrow checker 的所有权检查规则，让多个线程同时修改一个值，但 Cell 和 RefCell 本身又没有同步机制来避免 Data Race，所以它们是非 Sync 的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-2-send-intro&quot;&gt;2.2 Send Intro&lt;&#x2F;h3&gt;
&lt;p&gt;如 Sync，Rust 中几乎所有的类型都是 Send 的，但是有一些例外，比如 Rc。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Single-threaded example:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
We have an Rc&lt;String&gt; variable.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
We clone it multiple times.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
At this point, we cannot get a mutable reference to our String via Rc&lt;String&gt; clones, because there are multiple Rc&lt;String&gt; pointers present.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
If we drop some Rc&lt;String&gt; clones, so that there is only one reference remaining, then we can get a mutable reference to our String via Rc&lt;String&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;Multi-threaded example:&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
We have an Rc&lt;String&gt; variable.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
We clone it multiple times.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
We send these clones to different threads (actually we can’t do that, because Rust compiler forbids us to, but let’s say we can for the sake of this example).&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
At this point, we cannot get a mutable reference to our String, because there are multiple Rc&lt;String&gt; pointers present. So, let’s drop some of them.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
If two threads tries to drop their Rc&lt;String&gt; clones at the same time, a data race on the reference counting mechanism will occur. And we will never be able to get a mutable reference to our String.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;2-3-sync-and-send-relationship&quot;&gt;2.3 Sync and Send relationship&lt;&#x2F;h3&gt;
&lt;p&gt;The Rustonomicon &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nomicon&#x2F;send-and-sync.html#send-and-sync&quot;&gt;notices that&lt;&#x2F;a&gt;: &lt;font color=&quot;green&quot;&gt;A type is Sync if it is safe to share between threads (T is Sync if and only if &amp;amp;T is Send).&lt;&#x2F;font&gt;&lt;&#x2F;p&gt;
&lt;p&gt;实话说，看到这句话我的第一反应是（T is Sync if and only if &amp;amp;T is Send）是什么玩意，是人话吗？但看到作者的解释，倒也感觉有些道理：Sync 的本质是允许多个线程同时访问一个值，为了做到这一点我们需要把这个值的引用传递给其他线程，而这个引用就是 &amp;amp;T，所以 Sync 的定义就是可以被解释为&lt;font color=&quot;red&quot;&gt;和其他的线程安全地共享对象的不可变引用。&lt;&#x2F;font&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;3-mutex-deep-dive&quot;&gt;3. Mutex Deep Dive&lt;&#x2F;h2&gt;
&lt;p&gt;显然在多线程环境下，几乎所有类型都可以在不同的线程中安全的使用不可变引用，但是对于可变引用，我们需要使用 Mutex 或 RwLock 来保证线程安全。Mutex 和 RwLock 是最常见的两种允许多个线程同时修改临界数据的同步机制，同时它们也拥有内部可变性。&lt;&#x2F;p&gt;
&lt;p&gt;所以，现在我们可以再一次来回顾前面提出的问题，&lt;font color=&#x27;red&#x27;&gt;“Why T needs to be Send in order to Mutex&amp;lt;T&amp;gt; to be Sync?”&lt;&#x2F;font&gt;&lt;&#x2F;p&gt;
&lt;p&gt;其实现在的问题可以转换为：&lt;font color=&#x27;red&#x27;&gt;如果类型 T 是非 Send 的，那么 Mutex&amp;lt;T&amp;gt; 为什么不能 Sync 呢？&lt;&#x2F;font&gt;按照逻辑必定存在这样一个类型 T，它是非 Send 的，从而导致 Mutex&amp;lt;T&amp;gt; 也不能在多线程环境下安全的使用。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-1-does-t-needs-to-be-sync&quot;&gt;3.1 Does T needs to be Sync?&lt;&#x2F;h3&gt;
&lt;p&gt;为了确保 Mutex&amp;lt;T&amp;gt;是 Sync 的，需要确保 T 实现了 Send。那么 T 需要实现 Sync 吗？答案是否定的，具体可以通过 Cell&amp;lt;T&amp;gt; 这个未实现 Sync 的类型来验证。具体的例子如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn std::error::Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cell = Arc::new(Mutex::new(Cell::new(String::from(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;bbb&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;))));
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span&gt; handles = vec![];
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span&gt; idx in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; elem = format!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;ccc:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, idx);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; cell_ref = Arc::clone(&amp;amp;cell);
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; h = tokio::spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span&gt; changed = cell_ref.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;            changed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;set&lt;&#x2F;span&gt;&lt;span&gt;(elem);
&lt;&#x2F;span&gt;&lt;span&gt;        });
&lt;&#x2F;span&gt;&lt;span&gt;        handles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span&gt;(h);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    futures::future::join_all(handles).await;
&lt;&#x2F;span&gt;&lt;span&gt;    println!(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, cell.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;unwrap&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;get_mut&lt;&#x2F;span&gt;&lt;span&gt;()); &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Maybe output: ccc:5
&lt;&#x2F;span&gt;&lt;span&gt;    Ok(())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;这段代码可以正常编译运行通过，说明 Mutex&amp;lt;T&amp;gt; 想要是 Sync 的，只需要 T 满足 Send 即可，不管 T 是否满足 Sync。究其原因是因为 Mutex 限制了对 T 的访问，使得 T 的内部状态不会被多个线程同时访问，从而避免了 Data Race。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-2-are-we-send-t-when-sending-mutex-t-across-threads&quot;&gt;3.2 Are we send T when sending &amp;amp;Mutex&amp;lt;T&amp;gt; across threads?&lt;&#x2F;h3&gt;
&lt;p&gt;标题的意思旨在提出在不同的线程中使用 Mutex&amp;lt;T&amp;gt; 的引用是否等同于将 T 发送到了另一个线程，答案是否定的。Mutex&amp;lt;T&amp;gt; 的引用只是一个指向 Mutex&amp;lt;T&amp;gt; 的指针，而 Mutex&amp;lt;T&amp;gt; 本身是一个包含了 T 的结构体，所以 Mutex&amp;lt;T&amp;gt; 的引用并不等同于将 T 发送到了另一个线程。最直接的办法就是查看 Mutex&amp;lt;T&amp;gt; 修改底层 T 类型对象的方法 lock()：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;lock&lt;&#x2F;span&gt;&lt;span&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) -&amp;gt; LockResult&amp;lt;MutexGuard&amp;lt;&amp;#39;_, T&amp;gt;&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;继续查看 &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;sync&#x2F;struct.MutexGuard.html&quot;&gt;MutexGuard&lt;&#x2F;a&gt; 的定义：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F;&#x2F; An RAII implementation of a &amp;quot;scoped lock&amp;quot; of a mutex. When this structure is
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F;&#x2F; dropped (falls out of scope), the lock will be unlocked.
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F;&#x2F; The data protected by the mutex can be accessed through this guard via its
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F;&#x2F; [`Deref`] and [`DerefMut`] implementations.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span&gt;MutexGuard&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;&amp;#39;a&lt;&#x2F;span&gt;&lt;span&gt;, T: &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f2777a;color:#272b33;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;Sized + &amp;#39;a&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;我们注意到他本身是一个 RAII 的结构体，同时通过实现 Deref 和 DerefMut 两个 Trait，使得我们可以通过 MutexGuard 来访问 Mutex&amp;lt;T&amp;gt; 中的数据。其中 DerefMut 的&lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;ops&#x2F;trait.DerefMut.html&quot;&gt;定义&lt;&#x2F;a&gt;如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Used&lt;&#x2F;span&gt;&lt;span&gt; for mutable dereferencing operations, like in *v = 1;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;此时再次回想起前面提到的问题：Why T needs to be Send for Mutex&amp;lt;T&amp;gt; to be Sync?&lt;&#x2F;p&gt;
&lt;p&gt;我们很容易就能够理解为什么会提出这个问题，这个困惑是由 Send 命名造成的，让读者误以为 Send 是将对象自身发送到另一个线程，而实际上 Send 只是一个标记 Trait，用来指定一个类型可以在不同的时间被不同的线程安全地使用。因此，作者还特意选择了上文&lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;users&#x2F;2644842&#x2F;jonathan-giddy&quot;&gt;Jonathan Giddy&lt;&#x2F;a&gt;提出的这个定义。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-3-example-mutex-rc&quot;&gt;3.3 Example: Mutex&amp;lt;Rc&amp;gt;&lt;&#x2F;h3&gt;
&lt;p&gt;现在是时候来分析一下 Mutex&amp;lt;Rc&amp;lt;String&amp;gt;&amp;gt; 这个数据结构了，我们都知道 Rc&amp;lt;String&amp;gt; 是没有 Sync+Send 的，&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f2777a;color:#272b33;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;Sized, A: Allocator&amp;gt; !Send for Rc&amp;lt;T, A&amp;gt; {}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T: &lt;&#x2F;span&gt;&lt;span style=&quot;background-color:#f2777a;color:#272b33;&quot;&gt;?&lt;&#x2F;span&gt;&lt;span&gt;Sized, A: Allocator&amp;gt; !Sync for Rc&amp;lt;T, A&amp;gt; {}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;那么使用 Mutex&amp;lt;Rc&amp;lt;String&amp;gt;&amp;gt; 会发生什么呢？&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
创建一个 Mutex&amp;lt;Rc&amp;lt;String&amp;gt;&amp;gt; 对象 obj。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
在多个线程中使用 obj 的引用。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
Mutex 的 lock 机制会保证在任意时刻只有一个线程可以访问 obj 内部的 Rc&amp;lt;String&amp;gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
此时在多个线程中你可以直接使用 Rc&amp;lt;String&amp;gt; 的 clone 方法来创建 Rc&amp;lt;String&amp;gt; 的克隆，并且它们在 Mutex 的临界区之外也可以仍旧有效。如此相当于就有了多个不在 Mutex 的临界区内的 Rc&amp;lt;String&amp;gt; 的引用。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
如此就会导致有多个线程在尝试 drop Rc&amp;lt;String&amp;gt; 的时候，由于引用计数是非原子的，就会导致出现 Data Race。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;4-conclusion&quot;&gt;4. Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;“Safe to be used by two threads A and B at different times” 相对比较清楚的诠释了 &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nomicon&#x2F;send-and-sync.html#send-and-sync&quot;&gt;Send 的定义&lt;&#x2F;a&gt;，同时它也没有忽略原来的内容，而只是将其封装起来。
通过转移所有权的方式来实现线程对数据的安全访问是一种很好的方式，也是 Rust 在并发编程里面的基石。需要注意的是，纵使是 Arc&amp;lt;Mutex&amp;lt;T&amp;gt;&amp;gt; 仍旧工作在这个原则之下，虽然看上去好像有多个值的所有者，并且都可以去修改这个值，但实际上同时只有一个线程可以操作这个值，它仍旧满足 Rust 所有权的基本原则。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Paxos 和 Raft</title>
        <published>2023-03-17T00:00:00+00:00</published>
        <updated>2023-03-17T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://poltao.github.io/posts/paxos-and-raft-started/"/>
        <id>https://poltao.github.io/posts/paxos-and-raft-started/</id>
        
        <content type="html" xml:base="https://poltao.github.io/posts/paxos-and-raft-started/">&lt;p&gt;本质：集群内的多台服务器协同工作，让数据的副本在全部&#x2F;大多数服务器上保持一致，确保每次读写操作都能得到正确&#x2F;一致的结果。&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;什么是系统的可靠性要求？&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
系统的可靠性要求是指系统在一定时间内能够正常运行的概率。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;aws 的对象存储可靠性要求是 9~13 个 9，其中 9~13 个 9 的含义是什么？&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
9 个 9：99.9999999%的可靠性，即每十亿次操作中，只有一次操作失败。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;fen-bu-shi-yi-zhi-xing-suan-fa&quot;&gt;分布式一致性算法&lt;&#x2F;h2&gt;
&lt;p&gt;在分布式系统中一份数据冗余的存储多份保证了系统的可靠性, 而多个副本之间的一致, 通常是使用 paxos 这类分布式一致性算法来保证。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ji-chu-de-fu-zhi-ce-lue&quot;&gt;基础的复制策略&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;zhu-cong-yi-bu-fu-zhi&quot;&gt;主从异步复制&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;poltao.github.io&#x2F;posts&#x2F;paxos-and-raft-started&#x2F;master-slave-asynch-replication.png&quot; alt=&quot;主从异步复制&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;优点：主从异步复制的性能很高，因为主节点不需要等待从节点的确认。&lt;&#x2F;li&gt;
&lt;li&gt;缺点：主从异步复制的一致性无法保证。因为主节点在写入成功后就会返回确认，而从节点的复制是异步的，在复制的过程中任意一个机器发生故障，都会导致系统的数据出现不一致。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;zhu-cong-tong-bu-fu-zhi&quot;&gt;主从同步复制&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;poltao.github.io&#x2F;posts&#x2F;paxos-and-raft-started&#x2F;master-slave-sync-replication.png&quot; alt=&quot;主从同步复制&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;虽然这种复制策略能够保证数据的一致性，但是性能很差，并且因为主节点需要等待所有从节点的确认，那么任何一个从机宕机都会导致整个系统不可用。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zhu-cong-ban-tong-bu-fu-zhi&quot;&gt;主从半同步复制&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;poltao.github.io&#x2F;posts&#x2F;paxos-and-raft-started&#x2F;master-slave-semi-sync.png&quot; alt=&quot;主从半同步复制&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;主从半同步复制是主从同步复制和主从异步复制的折中方案。它要求 master 在应答客户端之前必须把数据复制到足够多的机器上,
但不需要是全部。&lt;br &#x2F;&gt;
但是存在一个显著的问题是，假如 a 数据复制到 slave1，但没有复制到 slave2 和 slave3；数据 b 复制到 slave2 和 slave3，但没有复制到
slave1，那么这个时候如果 master 宕机，就会导致没有一个 slave 是完整的数据，从而导致数据不一致。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;duo-shu-pai-du-xie&quot;&gt;多数派读写&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;poltao.github.io&#x2F;posts&#x2F;paxos-and-raft-started&#x2F;majority-reading-writing.png&quot; alt=&quot;多数派读写&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;显然这个策略刚刚好解决了上面主从半同步复制策略的问题，但是这个策略的性能也不好，因为 master 需要等待超过半数的 slave
确认后才能应答客户端。除此之外，在一些情况下，这个策略也无法保证数据的一致性。&lt;&#x2F;p&gt;
&lt;p&gt;如对于一个数据 a 在第一次更新时，在 slave1 和 slave2 上写入了&lt;code&gt;a=x&lt;&#x2F;code&gt;；在第二次更新时，在 slave2 和 slave3 上写入了&lt;code&gt;a=y&lt;&#x2F;code&gt;
。客户端来访问的时候，会发现 slave1 和 slave2 上的数据是不一致的。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;duo-shu-pai-du-xie-hou-xie-ru-you-sheng&quot;&gt;多数派读写-后写入优胜&lt;&#x2F;h3&gt;
&lt;p&gt;这个策略是对上述策略的一个实现的优化，要求我们在复制数据的时候不仅要写入数据本身，还要写入数据的版本号(保证是递增的即可)
。这样在读取数据的时候，我们可以通过版本号来获取最新的数据，从而保证数据的一致性。&lt;&#x2F;p&gt;
&lt;p&gt;存在的问题：仍旧是上面的例子，假设第二次更新的时候只更新了 slave3，然后客户端直接终止了。那么当客户端再次访问的时候，根据多数派读写的原则，则会发生如下情况：&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;color:#abb2bf;&quot;&gt;&lt;code&gt;&lt;span&gt;slave1 + slave2 --&amp;gt; a=x
&lt;&#x2F;span&gt;&lt;span&gt;slave2 + slave3 --&amp;gt; a=y
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;显然这就导致了数据的不一致。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;tips:&lt;&#x2F;strong&gt;
大佬的思考逻辑太牛逼了，我自己想的话最多想到主从半同步复制这种折中方案就不再思考了。由此可见，没有一个完美的方案，只有相对完美的方案[doge]。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;paxos-gong-shi-suan-fa&quot;&gt;Paxos 共识算法&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;en.wikipedia.org&#x2F;wiki&#x2F;Paxos_(computer_science)&quot;&gt;wikipedia&lt;&#x2F;a&gt; 是这样介绍 paxos 的：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;Paxos is a family of protocols for solving consensus in a network of unreliable or fallible processors. Consensus is
the process of agreeing on one result among a group of participants.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;它可以被认为是多数派读写的进一步升级, paxos 中通过 2 次原本并不严谨的多数派读写, 实现了严谨的强一致共识算法。&lt;&#x2F;p&gt;
&lt;p&gt;具体推导流程，参看大佬&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;drmingdrmer&quot;&gt;drmingdrmer&lt;&#x2F;a&gt;
文章&lt;a href=&quot;https:&#x2F;&#x2F;blog.openacid.com&#x2F;algo&#x2F;paxos&#x2F;&quot;&gt;可靠分布式系统-paxos 的直观解释&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;最终仿照作者&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;drmingdrmer&quot;&gt;drmingdrmer&lt;&#x2F;a&gt;原版 go 实现的 &lt;code&gt;paxoskv&lt;&#x2F;code&gt;，实现了一个 rust
版本的&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;poltao&#x2F;consistency&#x2F;tree&#x2F;main&#x2F;paxoskv&quot;&gt;paxoskv&lt;&#x2F;a&gt;，之后我感觉对 &lt;code&gt;Paxos&lt;&#x2F;code&gt; 有了一个较为粗浅的认知。&lt;&#x2F;p&gt;
&lt;p&gt;但此时我又开始回想，为什么如今工业界的分布式系统都不再使用 &lt;code&gt;Paxos&lt;&#x2F;code&gt; 而是 &lt;code&gt;Raft&lt;&#x2F;code&gt;
呢？网上直接搜索看到的答案都是实现过于复杂且难于理解，我觉得要了解真正的原因，只能去看 &lt;code&gt;Raft&lt;&#x2F;code&gt; 是如何批判 &lt;code&gt;Paxos&lt;&#x2F;code&gt; 的？ &lt;code&gt;Raft&lt;&#x2F;code&gt;
又提出了一种怎样的一致性共识策略？raft 在工程上的实现是否真的更简单且易于理解？&lt;&#x2F;p&gt;
&lt;h2 id=&quot;raft-lun-wen-yue-du-zhai-yao&quot;&gt;Raft 论文阅读摘要&lt;&#x2F;h2&gt;
&lt;blockquote&gt;
&lt;p&gt;🌻 感谢开源项目 &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;maemual&#x2F;raft-zh_cn&quot;&gt;maemual&#x2F;raft-zh_cn&lt;&#x2F;a&gt;，让我可以以较低的成本阅读 raft 论文。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;&lt;strong&gt;总结：leader 选举 + 日志复制 + 应用状态机，这三个部分构成了 Raft 的核心。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>defer、panic与recover</title>
        <published>2022-08-22T00:00:00+00:00</published>
        <updated>2022-08-22T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://poltao.github.io/posts/go-defer-and-panic/"/>
        <id>https://poltao.github.io/posts/go-defer-and-panic/</id>
        
        <content type="html" xml:base="https://poltao.github.io/posts/go-defer-and-panic/">&lt;p&gt;&lt;strong&gt;defer 语句&lt;&#x2F;strong&gt;会把一个函数调用放置到一个列表中，当调用 &lt;code&gt;defer&lt;&#x2F;code&gt; 语句的函数返回时会依次调用该列表中定义的所有函数。&lt;code&gt;defer&lt;&#x2F;code&gt; 通常会调用执行各种清理动作的简单函数。比如说下面这个例子，打开两个文件，并将内容从一个文件复制到另一个文件中：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;CopyFile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dstName&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;srcName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;written &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Open&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;srcName&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dst&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Create&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dstName&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;written&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Copy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dst&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dst&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;上面的程序看起来是正常的，但是如果 &lt;code&gt;os.Create(dstName)&lt;&#x2F;code&gt; 执行失败，程序将直接返回，从而导致 src 文件句柄没有及时关闭。一种比较简单的解决方式是将 src.Close() 方法在第二个 return 语句执行之前手动调用一次，但在函数逻辑很复杂的情况下可能会很容易被忽视，相反通过 defer 语句我们可以确保文件总是被及时关闭，上面的程序重构后如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;CopyFile&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dstName&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;srcName &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;string&lt;&#x2F;span&gt;&lt;span&gt;) (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;written &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int64&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Open&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;srcName&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dst&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Create&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dstName&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dst&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;io&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Copy&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dst&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;src&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;defer 语句确保了无论在函数中有多少的 return 语句我们都可以在打开文件之后立刻通过 defer 语句调用 close 方法关闭文件，以确保文件最终会及时关闭。defer 语句的行为是非常简单明了的，下面是几个简单的规则：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;1、defer 语句调用的函数参数值是基于调用 defer 语句时的对应变量值来确定的。比如在下面这个例子中表达式 &quot;i&quot; 的值在 defer fmt.Println 的时候就已经被赋值，在函数返回的时候 defer 语句将打印出 &quot;0&quot;。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;++
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;2、在函数返回的时候 defer 列表中定义的函数将以后进先出的次序执行。如下面的程序输出为 &quot;3210&quot; :&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;++ {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;3、defer 可以读取和更新函数返回值中的命名返回值。如下面的函数返回值为 2:&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;() (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;defer func&lt;&#x2F;span&gt;&lt;span&gt;() { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;++ }()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Panic&lt;&#x2F;strong&gt; 是一个阻止函数继续执行并向上抛出异常的内置函数。当函数 F 发生 panic 时，函数 F 的执行会停止，但其中定义的 defer 函数会正常执行。而此时对于函数 F 的调用者，F 的行为就像是手动调用了 panic，之后该程序会根据栈信息不停的向上返回，直到在这个 goroutine 中所有的程序都返回，这意味着该程序已经崩溃。Panics 既能通过手动调用 panic 语句调用也可能会发生在程序运行时，比如说数组越界。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Recover&lt;&#x2F;strong&gt; 是一个可以用来恢复发生 panic 的 goroutine 的内置函数，并且仅仅只能用在 defer 调用的函数里面。如果程序执行正常，recover() 函数将返回 nil 值，并且不会对程序造成影响；如果程序发生了 panic, 那么 recover() 将会捕获传递给 panic 的信息，并且恢复程序正常执行。&lt;&#x2F;p&gt;
&lt;p&gt;下面的程序演示了 panic 和 defer 的工作机制：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;fmt&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Returned normally from f.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;defer func&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;recover&lt;&#x2F;span&gt;&lt;span&gt;(); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;r &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Recovered in f&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Calling g.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Returned normally from g.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Panicking!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Sprintf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Defer in g&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fmt&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Printing in g&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;g&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;上面的例子中函数 g 接受参数 i，如果参数 i 的值大于 3 程序会发生 panic，否则它会用 &lt;code&gt;i + 1&lt;&#x2F;code&gt; 的值作为参数，递归的调用函数 g。函数 f 使用 defer 函数借助 recover 捕捉 panic 错误，如果 recover 返回值为非 nil 值，则打印出捕获到的值。在继续阅读之前，试着想象一下这个程序的输出可能是什么。&lt;&#x2F;p&gt;
&lt;p&gt;程序将会输出：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Calling&lt;&#x2F;span&gt;&lt;span&gt; g.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Printing&lt;&#x2F;span&gt;&lt;span&gt; in g 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Printing&lt;&#x2F;span&gt;&lt;span&gt; in g 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Printing&lt;&#x2F;span&gt;&lt;span&gt; in g 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Printing&lt;&#x2F;span&gt;&lt;span&gt; in g 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Panicking!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Defer&lt;&#x2F;span&gt;&lt;span&gt; in g 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Defer&lt;&#x2F;span&gt;&lt;span&gt; in g 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Defer&lt;&#x2F;span&gt;&lt;span&gt; in g 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Defer&lt;&#x2F;span&gt;&lt;span&gt; in g 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Recovered&lt;&#x2F;span&gt;&lt;span&gt; in f 4
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Returned&lt;&#x2F;span&gt;&lt;span&gt; normally from f.
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果将上面函数 f 中的 defer 函数移除，那么 panic 异常最终将会抛出到 goroutine 调用栈的顶部，然后终止程序。之后程序输出将如下所示：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Calling&lt;&#x2F;span&gt;&lt;span&gt; g.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Printing&lt;&#x2F;span&gt;&lt;span&gt; in g 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Printing&lt;&#x2F;span&gt;&lt;span&gt; in g 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Printing&lt;&#x2F;span&gt;&lt;span&gt; in g 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Printing&lt;&#x2F;span&gt;&lt;span&gt; in g 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Panicking!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Defer&lt;&#x2F;span&gt;&lt;span&gt; in g 3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Defer&lt;&#x2F;span&gt;&lt;span&gt; in g 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Defer&lt;&#x2F;span&gt;&lt;span&gt; in g 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Defer&lt;&#x2F;span&gt;&lt;span&gt; in g 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;panic:&lt;&#x2F;span&gt;&lt;span&gt; 4
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;panic&lt;&#x2F;span&gt;&lt;span&gt; PC=0x2a9cd8
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;[stack&lt;&#x2F;span&gt;&lt;span&gt; trace omitted]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Go 标准库中的 &lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;encoding&#x2F;json&quot;&gt;json package&lt;&#x2F;a&gt; 包，包含 panic 和 recover 的实际例子。它使用一组递归函数对接口进行编码，如果在遍历值时发生错误，panic 会被调用然后返回到堆栈的顶层，然后使用 recover 捕获错误或者返回一个合适的错误值（具体见 &lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;src&#x2F;encoding&#x2F;json&#x2F;encode.go&quot;&gt;encode.go&lt;&#x2F;a&gt; 中 encodeState 类型的 &#x27;error&#x27; 和 &#x27;marshal&#x27; 方法）。&lt;&#x2F;p&gt;
&lt;p&gt;Go 标准库中的约定是在包内部使用 panic，而它的外部 API 仍然提供明确的错误返回值。&lt;&#x2F;p&gt;
&lt;p&gt;其他一些使用 defer 的场景包括释放一个 mutex、打印出 footer 等：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; releasing a mutex
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mu&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Lock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mu&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Unlock&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; printing a footer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;printHeader&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;printFooter&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;总之，defer 语句为程序的控制流提供了不寻常和强有力的机制，可以使用它来模拟其他编程语言中需要借助专用结构才能实现的功能。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>如何设计Git服务器（小丑的看法）</title>
        <published>2022-07-12T00:00:00+00:00</published>
        <updated>2022-07-12T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://poltao.github.io/posts/design-git-server/"/>
        <id>https://poltao.github.io/posts/design-git-server/</id>
        
        <content type="html" xml:base="https://poltao.github.io/posts/design-git-server/">&lt;p&gt;在传统的 git 后端服务中，首要面对的挑战就是存储容量上限问题和用户并发访问高负载问题。本文简要概述 git 后端服务的架构，以及一些有用的文章。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-dan-ji-leng-bei-mo-shi&quot;&gt;1. 单机+冷备模式&lt;&#x2F;h3&gt;
&lt;p&gt;gitlab 社区版提供了单机版，可以通过配置 git hooks 触发同步任务，将数据保存备份到备机。&lt;br &#x2F;&gt;
存在的问题是同步任务经常出现卡住，同步失败，对象缺失等问题，备机无法保证实时最新，也无法保证数据完整性，备机不能开启读服务。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;2-dan-ji-fen-bu-shi-cun-chu&quot;&gt;2. 单机+分布式存储&lt;&#x2F;h3&gt;
&lt;p&gt;该场景希望使用分布式存储解决存储容量上限问题的问题，这样存储可以无限扩展，具体如下所示：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;imgse.com&#x2F;i&#x2F;xxrylD&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2022&#x2F;11&#x2F;08&#x2F;xxrylD.png&quot; alt=&quot;xxrylD.png&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;通过上图可以看见只使用了一个应用集群操作分布式文件系统，试想一下若新建多个应用集群，然后使用类似 dns 轮询分发请求的方式是否可以降低用户高并发访问时的负载？&lt;br &#x2F;&gt;
答案是否定的，Gitee 曾在该架构下发生过&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;362855087&quot;&gt;事故&lt;&#x2F;a&gt;，主要原因是分布式存储系统并不适合用在 Git 这种海量小文件的场景下，因为 Git 每一次的操作都需要遍历大量的引用和对象，导致每一次操作整体耗时非常多。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;3-shu-ju-fen-pian-zhu-bei-mo-shi&quot;&gt;3. 数据分片 + 主备模式&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;3-1-zhi-fen-pian&quot;&gt;3.1 只分片&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;imgse.com&#x2F;i&#x2F;xxsSpT&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2022&#x2F;11&#x2F;08&#x2F;xxsSpT.png&quot; alt=&quot;xxsSpT.png&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;上图为数据分片模式下的架构模型，其中集群内的 slave 由于仅仅是在主机写入完成后才会发起 hook 消息到从机(slave)，然后 slave 复制 master 数据到 slave。显然 slave 的同步可能会失败或缺失、不完整，所以该模式下所有的读写请求都是 master 来处理。&lt;br &#x2F;&gt;
在这种模式下一个集群只有一台主机提供服务，由于网络带宽和机器资源的限制，当集群的访问超出 master 最大 qps 时, 服务器就会出现不稳定的状况。当前 coding-git 就是运行在这种模式之下的，所以运行效率差强人意。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;3-2-fen-pian-du-xie-fen-chi&quot;&gt;3.2 分片+读写分离&lt;&#x2F;h4&gt;
&lt;p&gt;该点其实就是在 2.2.1 的基础上考虑，如何判定 master 和 slave 的仓库对等？也就是读到备机的数据是最新的，且完整的？最简单的一个步骤如下所示：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;由 master 节点，进行写操作，结束后计算并更新当前的 depot 的 hash 值;&lt;&#x2F;li&gt;
&lt;li&gt;通过 git hook 向 slave 发起同步任务;&lt;&#x2F;li&gt;
&lt;li&gt;slave 同步完 master 最新数据之后，计算并更新当前 depot 的 hash 值;&lt;&#x2F;li&gt;
&lt;li&gt;当新的读请求过来时，先查看是否有跟 master 的 depot hash 值相同的 slave，如果有，再根据负载均衡算法选择一台 slave，提供读服务。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h4 id=&quot;3-3-cun-zai-de-wen-ti&quot;&gt;3.3 存在的问题&lt;&#x2F;h4&gt;
&lt;p&gt;当某个分片的 master 节点发生异常（服务 crash 或服务器宕机等），会导致整个分片无法正常提供服务，下面是几点可能会产生的问题，摘自&lt;a href=&quot;https:&#x2F;&#x2F;developer.aliyun.com&#x2F;article&#x2F;786954&quot;&gt;阿里巴巴代码平台架构的演进之路&lt;&#x2F;a&gt;：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;可用性： 由于读写操作是分离的，所以在写服务器故障期间，服务的写功能是无法使用的； 对于单片而言，写操作是单点的，一台服务波动则整个分片都波动。&lt;&#x2F;li&gt;
&lt;li&gt;性能：主备机器在同步上需要额外的时间开销。对于松散文件、文件压缩的 Git 仓库，这个耗时比单文件拷贝耗时更久。&lt;&#x2F;li&gt;
&lt;li&gt;安全： 用户侧的短时间内的瞬时操作，对于节点同步来说可能是并发的，无法保证同步中的事务顺序。&lt;&#x2F;li&gt;
&lt;li&gt;成本：同分片写，主备机器要求规格完全一致，但由于接收的请求不同，存在严重的资源消耗不均；当同步的小文件多时，对延时敏感。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h3 id=&quot;4-duo-du-duo-xie&quot;&gt;4. 多读多写&lt;&#x2F;h3&gt;
&lt;p&gt;该节是阿里代码平台的一个实现方案，具体特征有：多写（写时复制）、无状态服务、快速校验仓库一致性。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;imgse.com&#x2F;i&#x2F;xxrL0s&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2022&#x2F;11&#x2F;08&#x2F;xxrL0s.png&quot; alt=&quot;xxrL0s.png&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;can-kao-wen-zhang&quot;&gt;参考文章&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;55964292&quot;&gt;一篇文章讲透分布式存储&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.zhihu.com&#x2F;column&#x2F;c_1350116235108196352&quot;&gt;硬核聊 Git 系列文章&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;developer.aliyun.com&#x2F;article&#x2F;786954&quot;&gt;阿里巴巴代码平台架构的演进之路&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;kaito-kidd.com&#x2F;2021&#x2F;10&#x2F;15&#x2F;what-is-the-multi-site-high-availability-design&#x2F;&quot;&gt;搞懂异地多活，看这篇就够了&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;bbs.huaweicloud.com&#x2F;blogs&#x2F;333158&quot;&gt;16 张图解｜一致性哈希算法&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>container&#x2F;heap包使用指南</title>
        <published>2022-06-28T00:00:00+00:00</published>
        <updated>2022-06-28T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://poltao.github.io/posts/go-container-heap/"/>
        <id>https://poltao.github.io/posts/go-container-heap/</id>
        
        <content type="html" xml:base="https://poltao.github.io/posts/go-container-heap/">&lt;p&gt;&lt;strong&gt;1、概述&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&quot;container&#x2F;heap&quot; 包提供了实现堆操作的接口，用户只需要定义满足 &lt;code&gt;heap.Interface&lt;&#x2F;code&gt; 接口的类型，就可以通过包提供的函数，像操作大根堆或小根堆一样，对实例数组变量进行 &lt;code&gt;Push&lt;&#x2F;code&gt; 和 &lt;code&gt;Pop&lt;&#x2F;code&gt; 操作。&lt;br &#x2F;&gt;
堆通常是一个可以被看做一棵树的数组对象，堆总是满足下列性质：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;堆中某个结点的值总是不大于或不小于其父结点的值；&lt;&#x2F;li&gt;
&lt;li&gt;堆总是一棵完全二叉树。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;堆的定义如下：n 个元素的序列 &lt;code&gt;{k1,k2,ki,…,kn}&lt;&#x2F;code&gt; 当且仅当满足下关系时，称之为堆：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;imgse.com&#x2F;i&#x2F;xxrlF0&quot;&gt;&lt;img src=&quot;https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2022&#x2F;11&#x2F;08&#x2F;xxrlF0.png&quot; alt=&quot;xxrlF0.png&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;下面将基于具体实例介绍&quot;container&#x2F;heap&quot; 包的使用。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;2、整数堆&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;下面的代码实现了一个整数类型的最小堆：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;container&#x2F;heap&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;log&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;IntHeap []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 下面几个函数必须实现，heap包会进行回调
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;IntHeap&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;) }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Less函数的实现决定最终实现是最大堆还是最小堆
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;IntHeap&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Less&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;] &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt;] }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;IntHeap&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Swap&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;)      { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;] }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;IntHeap&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;any&lt;&#x2F;span&gt;&lt;span&gt;)        { *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;((*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;.(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;)) }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;IntHeap&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Pop&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;any &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;old &lt;&#x2F;span&gt;&lt;span&gt;:= *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;old&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;old&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;old&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;IntHeap&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;heap&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Init&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;heap&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Len&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;heap&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Pop&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;3、标准库堆的实现&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;通过整数堆的使用方式，发现是通过定义新的整数数组类型，并为其实现 pointer receivers 的方法 Push、Pop，以及 value receivers 的方法 Len、Less、Swap 方法之后，借助 &quot;container&#x2F;heap&quot; 包提供的方法对该类型定义的几个方法进行回调，从而实现堆的功能。下面是具体的实现代码，逻辑见注释：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;heap
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;sort&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Interface 接口指明了想要使用这个包中的方法去实现堆，应该提供的接口方法
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 在 heap.Init 方法被调用、数据为空或者原始数据有序时，满足下列条件的情况下，小根堆会被建立
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; !h.Less(j, i) for 0 &amp;lt;= i &amp;lt; h.Len() and 2*i+1 &amp;lt;= j &amp;lt;= 2*i+2 and j &amp;lt; h.Len()
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 注意：包中的方法会在添加和删除元素的时候调用Interface 接口实现的 Push 和 Pop方法，详见下面代码
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Interface &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;interface &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Interface &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 包括 Len()、Less(i, j int)、Swap(i, j int)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;any&lt;&#x2F;span&gt;&lt;span&gt;)    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; add x as element Len()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Pop&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;any      &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; remove and return element Len() - 1.
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 将传入的变量初始化为堆，时间复杂度为 O(n), 其中 n = h.Len().
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Init&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Interface&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; heapify
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Len&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;-- {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;down&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 向堆中加入新的元素，时间复杂度为 O(log n), 其中 n = h.Len().
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Interface&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;any&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;up&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Len&lt;&#x2F;span&gt;&lt;span&gt;()-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Pop 移除并返回堆中的最小或最大元素，具体根据 h.Less 函数确定，时间复杂度为 O(log n).
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Pop 等价于 Remove(h, 0).
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Pop&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Interface&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;any &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Len&lt;&#x2F;span&gt;&lt;span&gt;() - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Swap&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;down&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 由此看出实现 h.Pop 方法时只需要将数组最后元素取出并返回即可
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Pop&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Remove 移除并返回堆中索引为 i 的元素，时间复杂度为 O(log n).
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Remove&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Interface&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;any &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Len&lt;&#x2F;span&gt;&lt;span&gt;() - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Swap&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;down&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;up&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Pop&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 当堆数组中索引 i 处的元素的值或优先级发生变更的时候调用 Fix 调整元素 i 在堆中的位置
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Fix&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Interface&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;down&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Len&lt;&#x2F;span&gt;&lt;span&gt;()) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;up&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 向上进行堆调整，将新增元素上升到满足条件的位置
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;up&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Interface&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;:= (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j &lt;&#x2F;span&gt;&lt;span&gt;- &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;) &#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; parent
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j &lt;&#x2F;span&gt;&lt;span&gt;|| !&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Less&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Swap&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; 向下进行堆调整，确保i0节点是左右子树中的最小节点
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;down&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Interface&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i0
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j1 &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j1 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; j1 &amp;lt; 0 after int overflow
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j1 &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; left child
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j2 &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j1 &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j2 &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Less&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j1&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j2 &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; = 2*i + 2  &#x2F;&#x2F; right child
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Less&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;break
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;h&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Swap&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i0
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;4、优先队列&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;举例实现针对结构实现的最小堆，也即一般意义上的优先队列：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;container&#x2F;heap&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;log&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;Node &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Val  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Next &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;float32
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;NodeHeap []&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Node
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;NodeHeap&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Less&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Val &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Val &lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;NodeHeap&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Swap&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;)      { &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;] }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;NodeHeap&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int           &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;) }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;NodeHeap&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;any&lt;&#x2F;span&gt;&lt;span&gt;)        { *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;.(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;)) }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;NodeHeap&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Pop&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;any &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;old &lt;&#x2F;span&gt;&lt;span&gt;:= *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;old&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;old&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;old&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;NodeHeap&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;heap&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Init&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;heap&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Next&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1.0&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;heap&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Next&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2.0&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;heap&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Next&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3.0&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Len&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Println&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;heap&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Pop&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;).(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Node&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;5、优先队列的应用&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;力扣第 23 题「 &lt;a href=&quot;https:&#x2F;&#x2F;leetcode.cn&#x2F;problems&#x2F;merge-k-sorted-lists&#x2F;&quot;&gt;合并 K 个升序链表&lt;&#x2F;a&gt;」，要求合并 k 个有序链表为 1 个有序列表，如何快速得到 k 个节点中的最小节点，接到结果链表上？&lt;br &#x2F;&gt;
此时就可以使用上述实现的优先队列了，不过需要稍微改动一下结构体，实现如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;**
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt; * Definition for singly-linked list.
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt; * type ListNode struct {
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt; *     Val int
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt; *     Next *ListNode
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt; * }
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt; *&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;ItemHeap []*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;ListNode
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;ItemHeap&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Less&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Val &lt;&#x2F;span&gt;&lt;span&gt;&amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Val&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;ItemHeap&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Swap&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt;) {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;j&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span&gt;]}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;ItemHeap&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Len&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;)}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;ItemHeap&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;interface&lt;&#x2F;span&gt;&lt;span&gt;{}) { *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;.(*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;ListNode&lt;&#x2F;span&gt;&lt;span&gt;)) }
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;ItemHeap&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;Pop&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;interface&lt;&#x2F;span&gt;&lt;span&gt;{} {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;old &lt;&#x2F;span&gt;&lt;span&gt;:= *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;n &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;old&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;old&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;old&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;n&lt;&#x2F;span&gt;&lt;span&gt;-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;mergeKLists&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;lists &lt;&#x2F;span&gt;&lt;span&gt;[]*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;ListNode&lt;&#x2F;span&gt;&lt;span&gt;) *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;ListNode &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ItemHeap&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;heap&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Init&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;_&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;v &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;range &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;lists &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;v &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;heap&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;v&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; dummy
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dummy &lt;&#x2F;span&gt;&lt;span&gt;:= &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ListNode&lt;&#x2F;span&gt;&lt;span&gt;{}
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dummy
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Len&lt;&#x2F;span&gt;&lt;span&gt;() &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;heap&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Pop&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;).(*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;ListNode&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Next &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;p &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;p&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Next
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Next &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;heap&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pq&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;x&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Next&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        }
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dummy&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Next
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;6、参考资料&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;pkg.go.dev&#x2F;container&#x2F;heap@go1.18.3&quot;&gt;https:&#x2F;&#x2F;pkg.go.dev&#x2F;container&#x2F;heap@go1.18.3&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;go.dev&#x2F;tour&#x2F;methods&#x2F;4&quot;&gt;You can declare methods with pointer receivers.&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;cs.opensource.google&#x2F;go&#x2F;go&#x2F;+&#x2F;refs&#x2F;tags&#x2F;go1.18.3:src&#x2F;container&#x2F;heap&#x2F;heap.go&quot;&gt;src&#x2F;container&#x2F;heap&#x2F;heap.go&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;http:&#x2F;&#x2F;cngolib.com&#x2F;container-heap.html&quot;&gt;Go 标准库中文文档--黄健宏&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>基于腾讯云cvm的云原生环境搭建</title>
        <published>2021-12-14T00:00:00+00:00</published>
        <updated>2021-12-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://poltao.github.io/posts/tlinux3-build/"/>
        <id>https://poltao.github.io/posts/tlinux3-build/</id>
        
        <content type="html" xml:base="https://poltao.github.io/posts/tlinux3-build/">&lt;p&gt;具体配置如下，操作系统为 TencentOS Server 3.1：😄&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;[root@VM-0-16-centos&lt;&#x2F;span&gt;&lt;span&gt; cms]$ cat &#x2F;etc&#x2F;motd
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Welcome&lt;&#x2F;span&gt;&lt;span&gt; to TencentOS 3 64bit
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Version&lt;&#x2F;span&gt;&lt;span&gt; 3.1 20210604
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tlinux3.1-64bit-5.4.119-19.0006-20210623
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;1-an-zhuang-vim&quot;&gt;1.安装 vim&lt;&#x2F;h2&gt;
&lt;p&gt;主要是更新 vim 的版本，使其&amp;gt;8.0,这样某些插件才可以正常安装。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;yum&lt;&#x2F;span&gt;&lt;span&gt; remove vim vi
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;rm -fr&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;local&#x2F;vim &#x2F;usr&#x2F;bin&#x2F;vim
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;tmp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;wget&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;github.com&#x2F;vim&#x2F;vim&#x2F;archive&#x2F;v8.2.0000.tar.gz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tar&lt;&#x2F;span&gt;&lt;span&gt; xzf  v8.2.0000.tar.gz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; vim-8.2.0000&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;.&#x2F;configure --prefix&lt;&#x2F;span&gt;&lt;span&gt;=&#x2F;usr&#x2F;local&#x2F;vim&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;  --with-features&lt;&#x2F;span&gt;&lt;span&gt;=huge&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; --enable-multibyte --enable-gtk3-check  --enable-rubyinterp&lt;&#x2F;span&gt;&lt;span&gt;=yes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; --with-python3-command&lt;&#x2F;span&gt;&lt;span&gt;=python3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; --enable-python3interp&lt;&#x2F;span&gt;&lt;span&gt;=yes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; --enable-perlinterp&lt;&#x2F;span&gt;&lt;span&gt;=yes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; --enable-luainterp&lt;&#x2F;span&gt;&lt;span&gt;=yes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; --enable-cscope
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;make &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt; install
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ln -s&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;local&#x2F;vim&#x2F;bin&#x2F;vim  &#x2F;usr&#x2F;bin&#x2F;vim
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;vim --version &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;#验证是否安装成功
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;接下来快速安装基本插件：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;~
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;gitcode.net&#x2F;qq_41345173&#x2F;tvim.git
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; tvim
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;cp&lt;&#x2F;span&gt;&lt;span&gt; .vimrc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.vimrc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mkdir -p ~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.vim&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;cp -r&lt;&#x2F;span&gt;&lt;span&gt; colors&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.vim&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;cp -r&lt;&#x2F;span&gt;&lt;span&gt; autoload&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.vim&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;cp -r&lt;&#x2F;span&gt;&lt;span&gt; plugged&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.vim&#x2F;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.vim&#x2F;plugged
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;unzip&lt;&#x2F;span&gt;&lt;span&gt; plugged.zip
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;~
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;rm -fr&lt;&#x2F;span&gt;&lt;span&gt; tvim
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;相关文章：
&lt;a href=&quot;https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_41345173&#x2F;article&#x2F;details&#x2F;120381818&quot;&gt;https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_41345173&#x2F;article&#x2F;details&#x2F;120381818&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-tlinux3-an-zhuang-docker&quot;&gt;2.tlinux3 安装 docker&lt;&#x2F;h2&gt;
&lt;p&gt;Tlinux3 和其他原生操作系统不同，有团队维护 tlinux 源，安装 docker-ce 的方式如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;yum&lt;&#x2F;span&gt;&lt;span&gt; install tencentos-release-docker-ce
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;yum&lt;&#x2F;span&gt;&lt;span&gt; update
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;yum&lt;&#x2F;span&gt;&lt;span&gt; install docker-ce docker-ce-cli containerd.io
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 测试
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;docker&lt;&#x2F;span&gt;&lt;span&gt; version
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;配置 github 相关域名的 ip 地址，以进行加速访问 github 资源：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;vim&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;etc&#x2F;hosts
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 尾部添加如下内容
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 在网站https:&#x2F;&#x2F;www.ipaddress.com&#x2F;获取最新ip
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;140.82.113.3&lt;&#x2F;span&gt;&lt;span&gt; github.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;185.199.108.133&lt;&#x2F;span&gt;&lt;span&gt; raw.githubusercontent.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;185.199.109.133&lt;&#x2F;span&gt;&lt;span&gt; raw.githubusercontent.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;185.199.110.133&lt;&#x2F;span&gt;&lt;span&gt; raw.githubusercontent.com
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;185.199.111.133&lt;&#x2F;span&gt;&lt;span&gt; raw.githubusercontent.com
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Docker-compose 安装：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;curl -LO &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;https:&#x2F;&#x2F;github.com&#x2F;docker&#x2F;compose&#x2F;releases&#x2F;download&#x2F;1.29.0&#x2F;docker-compose-$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;uname -s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;)-$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;uname -m&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;)&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -o&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;local&#x2F;bin&#x2F;docker-compose
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;3-an-zhuang-golang&quot;&gt;3.安装 golang&lt;&#x2F;h2&gt;
&lt;p&gt;安装 golang&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;wget&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;dl.google.com&#x2F;go&#x2F;go1.16.linux-amd64.tar.gz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sha256sum&lt;&#x2F;span&gt;&lt;span&gt; go1.16.linux-amd64.tar.gz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tar -C&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;local&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -xzf&lt;&#x2F;span&gt;&lt;span&gt; go1.16.linux-amd64.tar.gz
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 设置环境变量，在~&#x2F;.bashrc中添加如下配置
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;:&#x2F;usr&#x2F;local&#x2F;go&#x2F;bin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;GO111MODULE&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;on
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;GOPROXY&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;https:&#x2F;&#x2F;goproxy.cn,direct
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;GOSUMDB&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;off
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;GOPATH&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;root&#x2F;go
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;:$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;GOPATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&#x2F;bin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;安装 proto 依赖，便于进行 RPC 开发&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;git&lt;&#x2F;span&gt;&lt;span&gt; clone https:&#x2F;&#x2F;github.com&#x2F;protocolbuffers&#x2F;protobuf
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# v3.6.0+以上版本支持map解析，syntax=2、3消息序列化后是二进制兼容的，用root执行以下命令
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; protobuf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;.&#x2F;autogen.sh
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;.&#x2F;configure
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;make
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt; install
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ldconfig
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;protoc --version &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 检测是否安装成功
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;go&lt;&#x2F;span&gt;&lt;span&gt; get github.com&#x2F;golang&#x2F;protobuf &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 安装依赖包
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 安装gprc protocol插件
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;go&lt;&#x2F;span&gt;&lt;span&gt; install google.golang.org&#x2F;protobuf&#x2F;cmd&#x2F;protoc-gen-go@latest
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;go&lt;&#x2F;span&gt;&lt;span&gt; install google.golang.org&#x2F;grpc&#x2F;cmd&#x2F;protoc-gen-go-grpc@latest
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 安装grpc-gateway插件
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;go&lt;&#x2F;span&gt;&lt;span&gt; install github.com&#x2F;grpc-ecosystem&#x2F;grpc-gateway&#x2F;v2&#x2F;protoc-gen-grpc-gateway@latest
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;go&lt;&#x2F;span&gt;&lt;span&gt; install github.com&#x2F;grpc-ecosystem&#x2F;grpc-gateway&#x2F;v2&#x2F;protoc-gen-openapiv2@latest
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;4-an-zhuang-nginx&quot;&gt;4.安装 nginx&lt;&#x2F;h2&gt;
&lt;p&gt;通过以下命令安装和启动 nginx:&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;yum&lt;&#x2F;span&gt;&lt;span&gt; install nginx
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;systemctl&lt;&#x2F;span&gt;&lt;span&gt; start nginx
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# nginx默认监听端口为80，安装后可以通过&#x2F;etc&#x2F;nginx&#x2F;nginx.conf配置文件修改监听的端口
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# systemctl reload nginx可以一键重启nginx服务
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;5-an-zhuang-nodejs&quot;&gt;5.安装 nodejs&lt;&#x2F;h2&gt;
&lt;p&gt;首先在&lt;a href=&quot;https:&#x2F;&#x2F;nodejs.org&#x2F;zh-cn&#x2F;download&#x2F;&quot;&gt;官网下载页面&lt;&#x2F;a&gt;获取下载链接，然后下载安装：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mkdir -p&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;local&#x2F;nodejs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;tmp
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;curl -fLO&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;nodejs.org&#x2F;dist&#x2F;v16.16.0&#x2F;node-v16.16.0-linux-x64.tar.xz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tar -xJvf&lt;&#x2F;span&gt;&lt;span&gt; node-v16.16.0-linux-x64.tar.xz&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -C&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;local&#x2F;nodejs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;export PATH=&#x2F;usr&#x2F;local&#x2F;nodejs&#x2F;node-v16.16.0-linux-x64.tar.xz&#x2F;bin:$PATH&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.bashrc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;source &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.bashrc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;6-an-zhuang-commitizen-gong-ju&quot;&gt;6.安装 commitizen 工具&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;commitizen&#x2F;cz-cli&quot;&gt;commitizen 工具&lt;&#x2F;a&gt;是规范化 git 提交信息的 node 插件，安装流程如下：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;npm&lt;&#x2F;span&gt;&lt;span&gt; install&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -g&lt;&#x2F;span&gt;&lt;span&gt; commitizen
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;{ &amp;quot;path&amp;quot;: &amp;quot;cz-conventional-changelog&amp;quot; }&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.czrc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Pro tip:&lt;&#x2F;strong&gt; You can use all the git commit options with &lt;font color=&#x27;red&#x27;&gt;git cz&lt;&#x2F;font&gt;. For example: &lt;font color=&#x27;red&#x27;&gt;git cz
--signoff.&lt;&#x2F;font&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>gRPC-Go 使用指南</title>
        <published>2021-10-04T00:00:00+00:00</published>
        <updated>2021-10-04T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://poltao.github.io/posts/grpc-go-intro/"/>
        <id>https://poltao.github.io/posts/grpc-go-intro/</id>
        
        <content type="html" xml:base="https://poltao.github.io/posts/grpc-go-intro/">&lt;h2 id=&quot;1-grpc-kuang-jia-yuan-li&quot;&gt;1、gRPC 框架原理&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;poltao.github.io&#x2F;posts&#x2F;grpc-go-intro&#x2F;grpc.png&quot; alt=&quot;gRPC&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;RPC 框架通过隐藏底层的数据传输方式（TCP&#x2F;UDP）、序列化方式（XML&#x2F;JSON&#x2F;二进制）和通信细节，&lt;font color=red&gt;使服务调用变得简单透明&lt;&#x2F;font&gt;。用户只需提供 IP 和端口，就能像调用本地接口一样方便地访问远程服务。使用体验显示，相比传统 HTTP 服务，这种方式更为便捷。而 gRPC 是一个高性能、开源的通用 RPC 框架，专为服务端和移动端设计，基于 HTTP&#x2F;2。gRPC 特点如下：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;语言中立，支持多种语言；&lt;&#x2F;li&gt;
&lt;li&gt;基于 IDL 文件定义服务，通过 proto3 工具生成指定语言的数据结构、服务端接口以及客户端 Stub；&lt;&#x2F;li&gt;
&lt;li&gt;通信协议基于标准的 HTTP&#x2F;2 设计，支持双向流、消息头压缩、单 TCP 的多路复用、服务端推送等特性，这些特性使得 gRPC 在移动端设备上更加省电和节省网络流量；&lt;&#x2F;li&gt;
&lt;li&gt;序列化支持 PB（Protocol Buffer）和 JSON，PB 是一种语言无关的高性能序列化框架，基于 HTTP&#x2F;2 + PB, 保障了 RPC 调用的高性能。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;2-yi-lai-an-zhuang&quot;&gt;2、依赖安装&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;安装 golang&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;wget&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;golang.org&#x2F;dl&#x2F;go1.17.linux-amd64.tar.gz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sha256sum&lt;&#x2F;span&gt;&lt;span&gt; go1.17.linux-amd64.tar.gz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tar -C&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;local&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -xzf&lt;&#x2F;span&gt;&lt;span&gt; go1.17.linux-amd64.tar.gz
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 修改环境变量, 即在~&#x2F;.bashrc文件末尾添加如下语句即可：
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;PATH&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;:&#x2F;usr&#x2F;local&#x2F;go&#x2F;bin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;GO111MODULE&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;on
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;GOPROXY&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;https:&#x2F;&#x2F;mirrors.tencent.com&#x2F;go&#x2F;,goproxy.cn,direct
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;export &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;GOSUMDB&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;off
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;安装 protoc(&amp;gt;=3.0)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;直接在 GitHub Release 下载对应平台&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;protocolbuffers&#x2F;protobuf&#x2F;releases&#x2F;latest&quot;&gt;最新版本的二进制文件&lt;&#x2F;a&gt;，下载完成后解压到指定目录，然后将 bin 目录添加到环境变量即可。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;安装 gprc protocol 插件&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;go&lt;&#x2F;span&gt;&lt;span&gt; install google.golang.org&#x2F;protobuf&#x2F;cmd&#x2F;protoc-gen-go@v1.26
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;go&lt;&#x2F;span&gt;&lt;span&gt; install google.golang.org&#x2F;grpc&#x2F;cmd&#x2F;protoc-gen-go-grpc@v1.1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;配置环境变量&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;echo &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;export PATH=$PATH:$GOPATH&#x2F;bin&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;&amp;gt;&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;~&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;.bashrc
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;3-grpc-fu-wu-shi-li-cheng-xu&quot;&gt;3、gRPC 服务示例程序&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;编写 pb 文件 helloworld.proto&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;proto&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-proto &quot;&gt;&lt;code class=&quot;language-proto&quot; data-lang=&quot;proto&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;syntax &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;proto3&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;option &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;go_package &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;github.com&#x2F;botao&#x2F;helloworld&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span&gt;helloworld;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; The greeting service definition.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;service &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Greeter &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Sends a greeting
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;rpc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;SayHello &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;HelloRequest&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;returns &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;HelloReply&lt;&#x2F;span&gt;&lt;span&gt;) {}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;rpc &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;SayHelloAgain &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;HelloRequest&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;returns &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;HelloReply&lt;&#x2F;span&gt;&lt;span&gt;) {}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; The request message containing the user&amp;#39;s name.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;message &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;HelloRequest &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; The response message containing the greetings
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;message &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;HelloReply &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;  string &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;message &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;编写自动生成框架代码脚本&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;#!&#x2F;bin&#x2F;bash
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;cd &lt;&#x2F;span&gt;&lt;span&gt;$(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;dirname &lt;&#x2F;span&gt;&lt;span&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;) || &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;exit&lt;&#x2F;span&gt;&lt;span&gt; 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mkdir -p&lt;&#x2F;span&gt;&lt;span&gt; v1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;protoc --go_out&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;v1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; --go_opt&lt;&#x2F;span&gt;&lt;span&gt; paths=source_relative \
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;       --go-grpc_out&lt;&#x2F;span&gt;&lt;span&gt; .&#x2F;v1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; --go-grpc_opt&lt;&#x2F;span&gt;&lt;span&gt; paths=source_relative helloworld.proto
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 当要使用grpc-gateway特性时可采取下列模版生成代码
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 替换成对应的目录，对应内容：https:&#x2F;&#x2F;github.com&#x2F;googleapis&#x2F;googleapis，https:&#x2F;&#x2F;github.com&#x2F;protocolbuffers&#x2F;protobuf
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# PB_INCLUDE=&amp;quot;-I&#x2F;root&#x2F;go&#x2F;src&#x2F;github.com&#x2F;googleapis&#x2F; -I&#x2F;root&#x2F;go&#x2F;src&#x2F;github.com&#x2F;protocolbuffers&#x2F;protobuf&#x2F;src&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# protoc -I . $PB_INCLUDE \
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;#     --go_out .&#x2F;v1 --go_opt paths=source_relative \
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;#     --go-grpc_out .&#x2F;v1 --go-grpc_opt paths=source_relative helloworld.proto
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 当要使用grpc-gateway特性时使用
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# protoc -I . $PB_INCLUDE \
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;#     --grpc-gateway_out .&#x2F;v1 \
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;#     --grpc-gateway_opt logtostderr=true \
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;#     --grpc-gateway_opt paths=source_relative \
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;#     --grpc-gateway_opt generate_unbound_methods=true helloworld.proto
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;编写服务端代码&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;context&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;log&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;net&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;github.com&#x2F;botao&#x2F;helloworld&#x2F;proto&#x2F;v1&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;google.golang.org&#x2F;grpc&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;port &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;:50051&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; server is used to implement helloworld.GreeterServer.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span&gt;server &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;UnimplementedGreeterServer
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; SayHello implements helloworld.GreeterServer
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;server&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;SayHello&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ctx context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;HelloRequest&lt;&#x2F;span&gt;&lt;span&gt;) (*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;HelloReply&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Received: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;GetName&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;HelloReply&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Message&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Hello &amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;GetName&lt;&#x2F;span&gt;&lt;span&gt;()}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;server&lt;&#x2F;span&gt;&lt;span&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;SayHelloAgain&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ctx context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;Context&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;HelloRequest&lt;&#x2F;span&gt;&lt;span&gt;) (*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;HelloReply&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;error&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Received: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;GetName&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;HelloReply&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Message&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Hello again&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;+ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;in&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;GetName&lt;&#x2F;span&gt;&lt;span&gt;()}, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;nil
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;lis&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;net&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Listen&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;tcp&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;port&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Fatalf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;failed to listen: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;s &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;grpc&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;NewServer&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;RegisterGreeterServer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;server&lt;&#x2F;span&gt;&lt;span&gt;{})
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;server listening at &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;lis&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Addr&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;	&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Serve&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;lis&lt;&#x2F;span&gt;&lt;span&gt;); &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;		&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Fatalf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;failed to serve: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;	}
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;编写客户端代码&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;go&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-go &quot;&gt;&lt;code class=&quot;language-go&quot; data-lang=&quot;go&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;package &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;main
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;context&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;log&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;os&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;time&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;google.golang.org&#x2F;grpc&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pb &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;github.com&#x2F;botao&#x2F;helloworld&#x2F;proto&#x2F;v1&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;(
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;address     &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;localhost:50051&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;defaultName &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;world&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;func &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Set up a connection to the server.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;conn&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;grpc&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Dial&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;address&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;grpc&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;WithInsecure&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;grpc&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;WithBlock&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Fatalf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;did not connect: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;conn&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Close&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;c &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;NewGreeterClient&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;conn&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&#x2F;&#x2F; Contact the server and print out its response.
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;defaultName
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Args&lt;&#x2F;span&gt;&lt;span&gt;) &amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;os&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Args&lt;&#x2F;span&gt;&lt;span&gt;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;cancel &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;WithTimeout&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;context&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Background&lt;&#x2F;span&gt;&lt;span&gt;(), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Second&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;defer &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;cancel&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;:= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;SayHello&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;amp&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;HelloRequest&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Fatalf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;could not greet: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Greeting: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;GetMessage&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;c&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;SayHelloAgain&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ctx&lt;&#x2F;span&gt;&lt;span&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;amp&lt;&#x2F;span&gt;&lt;span&gt;;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pb&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;HelloRequest&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Name&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;})
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err &lt;&#x2F;span&gt;&lt;span&gt;!= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;nil &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Fatalf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;could not greet: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;%v&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;err&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;log&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Printf&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Greeting: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;GetMessage&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;执行测试
&lt;img src=&quot;https:&#x2F;&#x2F;poltao.github.io&#x2F;posts&#x2F;grpc-go-intro&#x2F;grpc_test.png&quot; alt=&quot;grpc-test&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;li&gt;代码结构
&lt;img src=&quot;https:&#x2F;&#x2F;poltao.github.io&#x2F;posts&#x2F;grpc-go-intro&#x2F;struct.png&quot; alt=&quot;struct&quot; &#x2F;&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>matplotlib.pyplot.quiver使用指南</title>
        <published>2020-12-18T00:00:00+00:00</published>
        <updated>2020-12-18T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://poltao.github.io/posts/matplotlib-quiver/"/>
        <id>https://poltao.github.io/posts/matplotlib-quiver/</id>
        
        <content type="html" xml:base="https://poltao.github.io/posts/matplotlib-quiver/">&lt;h1 id=&quot;1-yin-zi&quot;&gt;1. 引子&lt;&#x2F;h1&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;X = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;arange&lt;&#x2F;span&gt;&lt;span&gt;(-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;Y = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;arange&lt;&#x2F;span&gt;&lt;span&gt;(-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# meshgrid 生成网格，此处生成两个 shape = (20,20) 的 ndarray, 详见参考资料2,3
&lt;&#x2F;span&gt;&lt;span&gt;U, V = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;meshgrid&lt;&#x2F;span&gt;&lt;span&gt;(X, Y)
&lt;&#x2F;span&gt;&lt;span&gt;C = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sin&lt;&#x2F;span&gt;&lt;span&gt;(U)
&lt;&#x2F;span&gt;&lt;span&gt;fig, ax = plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;subplots&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 绘制箭头
&lt;&#x2F;span&gt;&lt;span&gt;q = ax.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;quiver&lt;&#x2F;span&gt;&lt;span&gt;(X, Y, U, V, C)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 该函数绘制一个箭头标签在 (X, Y) 处， 长度为U, 详见参考资料4
&lt;&#x2F;span&gt;&lt;span&gt;ax.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;quiverkey&lt;&#x2F;span&gt;&lt;span&gt;(q, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;X&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0.3&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Y&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1.1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;U&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;             &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;label&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;Quiver key, length = 10&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;labelpos&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;E&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;效果如下图所示：&lt;&#x2F;p&gt;
&lt;div align=&quot;center&quot;&gt;
    &lt;img src=&quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;12&#x2F;17&#x2F;6kSNPoBr4wDbITA.png&quot; alt=&quot;pyplot&quot; width=&quot;600&quot; height=&quot;400&quot;&gt;
&lt;&#x2F;div&gt;
&lt;h1 id=&quot;2-matplotlib-pyplot-quiver&quot;&gt;2. matplotlib.pyplot.quiver&lt;&#x2F;h1&gt;
&lt;p&gt;根据 &lt;a href=&quot;https:&#x2F;&#x2F;matplotlib.org&#x2F;3.3.3&#x2F;api&#x2F;_as_gen&#x2F;matplotlib.pyplot.quiver.html&quot;&gt;matplotlib.pyplot.quiver.html&lt;&#x2F;a&gt;显示，该函数原型&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py3&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py3 &quot;&gt;&lt;code class=&quot;language-py3&quot; data-lang=&quot;py3&quot;&gt;&lt;span&gt;matplotlib.pyplot.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;quiver&lt;&#x2F;span&gt;&lt;span&gt;(*args, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;, **kw)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;签名如下：&lt;&#x2F;p&gt;
&lt;font color=&quot;orange&quot; size=4&gt;
quiver([X, Y], U, V, [C], **kw)
&lt;&#x2F;font&gt;
&lt;p&gt;其中 X, Y 定义了箭头的位置, U, V 定义了箭头的方向, C 作为可选参数用来设置颜色。&lt;br &#x2F;&gt;
下面是几个常见的参数：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;units：&lt;&#x2F;strong&gt; 此参数指示了除箭头长度外，其他尺寸的变化趋势，以该单位的倍数测量。可取值为 &lt;code&gt;{&#x27;width&#x27;, &#x27;height&#x27;, &#x27;dots&#x27;, &#x27;inches&#x27;, &#x27;x&#x27;, &#x27;y&#x27; &#x27;xy&#x27;}&lt;&#x2F;code&gt;, 默认是 &lt;code&gt;&#x27;width&#x27;&lt;&#x2F;code&gt;。需要配合 &lt;code&gt;scale&lt;&#x2F;code&gt; 参数使用。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;scale:&lt;&#x2F;strong&gt; &lt;code&gt;float, optional&lt;&#x2F;code&gt;。此参数是每个箭头长度单位的数据单位数，通常该值越小，意味着箭头越长，默认为 &lt;code&gt;None&lt;&#x2F;code&gt; ,此时系统会采用自动缩放算法。箭头长度单位由 &lt;code&gt;scale_units&lt;&#x2F;code&gt; 参数指定。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;scale_units:&lt;&#x2F;strong&gt; 此参数是可选参数，其中包含以下值：&lt;code&gt;{&#x27;width&#x27;, &#x27;height&#x27;, &#x27;dots&#x27;, &#x27;inches&#x27;, &#x27;x&#x27;, &#x27;y&#x27;, &#x27;xy&#x27;}&lt;&#x2F;code&gt;, 一般当 &lt;code&gt;scale=None&lt;&#x2F;code&gt; 时该选项指示长度单位，默认为 &lt;code&gt;None&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;angles:&lt;&#x2F;strong&gt; 此参数指定了确定箭头角度的方法，可以取 &lt;code&gt;{&#x27;uv&#x27;, &#x27;xy&#x27;}&lt;&#x2F;code&gt; 或者 &lt;code&gt;array-like&lt;&#x2F;code&gt;, 默认是 &lt;code&gt;&#x27;uv&#x27; &lt;&#x2F;code&gt;。 设计原因是 因为图的宽和高可能不同，所以 &lt;code&gt;x&lt;&#x2F;code&gt; 方向的单位长度和 &lt;code&gt;y&lt;&#x2F;code&gt; 方向的单位长度可能不同，这时我们需要做出选择，一是不管长度对不对，角度一定要对，此时 &lt;code&gt;angles=&#x27;uv&#x27;&lt;&#x2F;code&gt;，二是不管角度了，只要长度对就可以了，此时 &lt;code&gt;angles=&#x27;xy&#x27;&lt;&#x2F;code&gt;。当该值为一个 &lt;code&gt;array&lt;&#x2F;code&gt; 的时候，该数组应该是以度数为单位的数组，表示了每一个箭头的方向，如下所示：&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;fig, ax = plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;subplots&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 以水平轴按照 angles 参数逆时针旋转得到箭头方向， units=&amp;#39;xy&amp;#39; 指出了箭头长度计算方法
&lt;&#x2F;span&gt;&lt;span&gt;ax.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;quiver&lt;&#x2F;span&gt;&lt;span&gt;((&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;), (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;), &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;angles&lt;&#x2F;span&gt;&lt;span&gt;=[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;60&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;300&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;units&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;xy&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;r&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;axis&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;equal&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;xticks&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;yticks&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;grid&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div align=&quot;center&quot;&gt;
    &lt;img src=&quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;12&#x2F;17&#x2F;MpESeTBI6jnZUwH.png&quot; alt=&quot;pyplot&quot; width=&quot;600&quot; height=&quot;400&quot;&gt;
&lt;&#x2F;div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;pivot:&lt;&#x2F;strong&gt; &lt;code&gt;{&#x27;tail&#x27;, &#x27;mid&#x27;, &#x27;middle&#x27;, &#x27;tip&#x27;}&lt;&#x2F;code&gt;, 默认为 &lt;code&gt;&#x27;tail&#x27;&lt;&#x2F;code&gt;。该参数指定了箭头的基点(旋转点)。&lt;&#x2F;li&gt;
&lt;li&gt;width:此参数是轴宽，以箭头为单位。&lt;&#x2F;li&gt;
&lt;li&gt;headwidth:该参数是杆头宽度乘以杆身宽度的倍数。&lt;&#x2F;li&gt;
&lt;li&gt;headlength:此参数是长度宽度乘以轴宽度。&lt;&#x2F;li&gt;
&lt;li&gt;headwidth:该参数是杆头宽度乘以杆身宽度的倍数。&lt;&#x2F;li&gt;
&lt;li&gt;headaxislength:此参数是轴交点处的头部长度。&lt;&#x2F;li&gt;
&lt;li&gt;minshaft:此参数是箭头缩放到的长度，以头部长度为单位。&lt;&#x2F;li&gt;
&lt;li&gt;minlength:此参数是最小长度，是轴宽度的倍数。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;3-quiver-shi-li&quot;&gt;3. quiver 示例&lt;&#x2F;h1&gt;
&lt;ul&gt;
&lt;li&gt;以箭头中间为基点，并在该点画出一个红色的点：&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;X, Y = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;meshgrid&lt;&#x2F;span&gt;&lt;span&gt;(np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;arange&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* np.pi, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;.2&lt;&#x2F;span&gt;&lt;span&gt;), np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;arange&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* np.pi, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;.2&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;U, V = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;cos&lt;&#x2F;span&gt;&lt;span&gt;(X), np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sin&lt;&#x2F;span&gt;&lt;span&gt;(Y)
&lt;&#x2F;span&gt;&lt;span&gt;fig, ax = plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;subplots&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;ax.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;set_title&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;pivot=&amp;#39;mid&amp;#39;; every third arrow; units=&amp;#39;inches&amp;#39;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;Q = ax.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;quiver&lt;&#x2F;span&gt;&lt;span&gt;(X[::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, ::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;], Y[::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, ::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;], U[::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, ::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;], V[::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, ::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;units&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;inches&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pivot&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;mid&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;g&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;qk = ax.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;quiverkey&lt;&#x2F;span&gt;&lt;span&gt;(Q, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0.9&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0.9&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;rac{m}{s}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;labelpos&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;E&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;coordinates&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;figure&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;ax.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;scatter&lt;&#x2F;span&gt;&lt;span&gt;(X[::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, ::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;], Y[::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;, ::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;r&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div align=&quot;center&quot;&gt;
    &lt;img src=&quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;12&#x2F;18&#x2F;MFhOvrsIqY4jlgx.png&quot; alt=&quot;pyplot&quot; width=&quot;600&quot; height=&quot;400&quot;&gt;
&lt;&#x2F;div&gt;
&lt;ul&gt;
&lt;li&gt;头部， 并为每个箭头设置颜色和大小&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span&gt;X, Y = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;meshgrid&lt;&#x2F;span&gt;&lt;span&gt;(np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;arange&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* np.pi, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;.2&lt;&#x2F;span&gt;&lt;span&gt;), np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;arange&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;* np.pi, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;.2&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span&gt;U, V = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;cos&lt;&#x2F;span&gt;&lt;span&gt;(X), np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sin&lt;&#x2F;span&gt;&lt;span&gt;(Y)
&lt;&#x2F;span&gt;&lt;span&gt;fig, ax = plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;subplots&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# M 为颜色矩阵
&lt;&#x2F;span&gt;&lt;span&gt;M = np.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;hypot&lt;&#x2F;span&gt;&lt;span&gt;(U, V)
&lt;&#x2F;span&gt;&lt;span&gt;ax.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;set_title&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;pivot=&amp;#39;tip&amp;#39;; scales with x view&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;Q = ax.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;quiver&lt;&#x2F;span&gt;&lt;span&gt;(X, Y, U, V, M, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;units&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;xy&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;scale&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span&gt;&#x2F; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0.15&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pivot&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;tip&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;qk = ax.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;quiverkey&lt;&#x2F;span&gt;&lt;span&gt;(Q, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0.9&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0.9&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;r&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;rac{m}{s}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;$&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;labelpos&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;E&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;                  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;coordinates&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;figure&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;ax.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;scatter&lt;&#x2F;span&gt;&lt;span&gt;(X, Y, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;color&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;r&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;s&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;plt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;show&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;div align=&quot;center&quot;&gt;
    &lt;img src=&quot;https:&#x2F;&#x2F;i.loli.net&#x2F;2020&#x2F;12&#x2F;18&#x2F;GLcWSgTJ9ydfCFu.png&quot; alt=&quot;pyplot&quot; width=&quot;600&quot; height=&quot;400&quot;&gt;
&lt;&#x2F;div&gt;
&lt;h1 id=&quot;4-can-kao-zi-liao&quot;&gt;4. 参考资料&lt;&#x2F;h1&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;matplotlib.org&#x2F;3.3.3&#x2F;gallery&#x2F;images_contours_and_fields&#x2F;quiver_simple_demo.html&quot;&gt;1. Quiver Simple Demo&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;numpy.org&#x2F;doc&#x2F;stable&#x2F;reference&#x2F;generated&#x2F;numpy.meshgrid.html#numpy.meshgrid&quot;&gt;2. numpy.meshgrid&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_38701868&#x2F;article&#x2F;details&#x2F;99694048?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control&amp;amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.control&quot;&gt;3. Numpy 中的 meshgrid()函数&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;matplotlib.org&#x2F;3.3.3&#x2F;api&#x2F;_as_gen&#x2F;matplotlib.axes.Axes.quiverkey.html#matplotlib.axes.Axes.quiverkey&quot;&gt;4. matplotlib.axes.Axes.quiverkey&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cnblogs.com&#x2F;gujianmu&#x2F;p&#x2F;12853643.html&quot;&gt;5. matplotlib quiver:清奇的脑回路&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;matplotlib.org&#x2F;3.3.3&#x2F;gallery&#x2F;images_contours_and_fields&#x2F;quiver_demo.html#sphx-glr-gallery-images-contours-and-fields-quiver-demo-py&quot;&gt;6. Advanced quiver and quiverkey functions&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>一文读懂 MySQL 底层架构实现</title>
        <published>2020-11-14T00:00:00+00:00</published>
        <updated>2020-11-14T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://poltao.github.io/posts/mysql-arch/"/>
        <id>https://poltao.github.io/posts/mysql-arch/</id>
        
        <content type="html" xml:base="https://poltao.github.io/posts/mysql-arch/">&lt;h1 id=&quot;1-mysql-de-luo-ji-jia-gou&quot;&gt;1. MySQL 的逻辑架构&lt;&#x2F;h1&gt;
&lt;div align=&quot;center&quot;&gt;
    &lt;img src=&quot;https:&#x2F;&#x2F;static001.geekbang.org&#x2F;resource&#x2F;image&#x2F;0d&#x2F;d9&#x2F;0d2070e8f84c4801adbfa03bda1f98d9.png&quot; alt=&quot;arch&quot; width=&quot;700&quot; height=&quot;400&quot;&gt;
&lt;&#x2F;div&gt;
&lt;p&gt;&lt;font size=2&gt;&lt;strong&gt;MySQL 的逻辑架构图：&lt;a href=&quot;https:&#x2F;&#x2F;time.geekbang.org&#x2F;column&#x2F;article&#x2F;68319&quot;&gt;https:&#x2F;&#x2F;time.geekbang.org&#x2F;column&#x2F;article&#x2F;68319&lt;&#x2F;a&gt;&lt;&#x2F;strong&gt;&lt;&#x2F;font&gt;&lt;&#x2F;p&gt;
&lt;p&gt;大体来说，MySQL 可以分为 Server 层和存储引擎层两部分。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;1-1-server-ceng&quot;&gt;1.1 Server 层&lt;&#x2F;h2&gt;
&lt;p&gt;Server 层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;1-2-cun-chu-yin-qing-ceng&quot;&gt;1.2 存储引擎层&lt;&#x2F;h2&gt;
&lt;p&gt;存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持 &lt;code&gt;InnoDB、MyISAM、Memory&lt;&#x2F;code&gt; 等多个存储引擎。现在最常用的存储引擎是&lt;code&gt; InnoDB&lt;&#x2F;code&gt;，它从 &lt;code&gt;MySQL 5.5.5&lt;&#x2F;code&gt; 版本开始成为了默认存储引擎。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;1-3-yi-tiao-sql-yu-ju-zhi-xing-liu-cheng-zhong-mei-ge-zu-jian-de-zuo-yong&quot;&gt;1.3 一条 SQL 语句执行流程中每个组件的作用&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-3-1-lian-jie-qi&quot;&gt;1.3.1 连接器&lt;&#x2F;h3&gt;
&lt;p&gt;第一步，你会先连接到这个数据库上，这时候接待你的就是&lt;strong&gt;连接器&lt;&#x2F;strong&gt;。连接器负责跟客户端建立连接、获取权限、维持和管理连接。&lt;&#x2F;p&gt;
&lt;p&gt;连接完成后，如果你没有后续的动作，这个连接就处于空闲状态，你可以在 &lt;code&gt;show processlist&lt;&#x2F;code&gt; 命令中看到它。客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数 &lt;code&gt;wait_timeout&lt;&#x2F;code&gt; 控制的，默认值是 8 小时。如果在连接被断开之后，客户端再次发送请求的话，就会收到一个错误提醒： &lt;code&gt;Lost connection to MySQL server during query&lt;&#x2F;code&gt;。这时候如果你要继续，就需要重连，然后再执行请求了。&lt;br &#x2F;&gt;
&lt;strong&gt;数据库里面，长连接是指连接成功后，如果客户端持续有请求，则一直使用同一个连接。短连接则是指每次执行完很少的几次查询就断开连接，下次查询再重新建立一个。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;但是全部使用长连接后，你可能会发现，有些时候 MySQL 占用内存涨得特别快，这是因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面的。这些资源会在连接断开的时候才释放。所以如果长连接累积下来，可能导致内存占用太大，被系统强行杀掉（OOM），从现象看就是 MySQL 异常重启了。&lt;&#x2F;p&gt;
&lt;p&gt;怎么解决这个问题呢？你可以考虑以下两种方案。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，断开连接，之后要查询再重连。&lt;&#x2F;li&gt;
&lt;li&gt;如果你用的是 MySQL 5.7 或更新版本，可以在每次执行一个比较大的操作后，通过执行 mysql_reset_connection 来重新初始化连接资源。这个过程不需要重连和重新做权限验证，但是会将连接恢复到刚刚创建完时的状态。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;1-3-2-cha-xun-huan-cun&quot;&gt;1.3.2 查询缓存&lt;&#x2F;h3&gt;
&lt;p&gt;执行逻辑就会来到第二步：&lt;strong&gt;查询缓存。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;MySQL 拿到一个查询请求后，会先到查询缓存看看，之前是不是执行过这条语句。之前执行过的语句及其结果可能会以 key-value 对的形式，被直接缓存在内存中。key 是查询的语句，value 是查询的结果。如果你的查询能够直接在这个缓存中找到 key，那么这个 value 就会被直接返回给客户端。&lt;&#x2F;p&gt;
&lt;p&gt;如果语句不在查询缓存中，就会继续后面的执行阶段。执行完成后，执行结果会被存入查询缓存中。你可以看到，如果查询命中缓存，MySQL 不需要执行后面的复杂操作，就可以直接返回结果，这个效率会很高。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;但是大多数情况下建议不要使用查询缓存，为什么呢？因为查询缓存往往弊大于利。&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;查询缓存的失效非常频繁，只要有对一个表的更新，这个表上所有的查询缓存都会被清空。因此很可能你费劲地把结果存起来，还没使用呢，就被一个更新全清空了。对于更新压力大的数据库来说，查询缓存的命中率会非常低。除非你的业务就是有一张静态表，很长时间才会更新一次。比如，一个系统配置表，那这张表上的查询才适合使用查询缓存。&lt;&#x2F;p&gt;
&lt;p&gt;好在 &lt;code&gt;MySQL&lt;&#x2F;code&gt; 也提供了这种“按需使用”的方式。你可以将参数 &lt;code&gt;query_cache_type &lt;&#x2F;code&gt;设置成 &lt;code&gt;DEMAND&lt;&#x2F;code&gt;，这样对于默认的 SQL 语句都不使用查询缓存。而对于你确定要使用查询缓存的语句，可以用 &lt;code&gt;SQL_CACHE&lt;&#x2F;code&gt; 显式指定，像下面这个语句一样：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mysql&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; select SQL_CACHE * from T where ID=10；
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;需要注意的是，&lt;code&gt;MySQL 8.0&lt;&#x2F;code&gt; 版本直接将查询缓存的整块功能删掉了，也就是说 8.0 开始彻底没有这个功能了。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-3-3-fen-xi-qi&quot;&gt;1.3.3 分析器&lt;&#x2F;h3&gt;
&lt;p&gt;如果没有命中查询缓存，就要开始真正执行语句了。分析器先会做“词法分析”, 做完以后，就要做“语法分析”。根据词法分析的结果，语法分析器会根据语法规则，判断你输入的这个 SQL 语句是否满足 MySQL 语法。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-3-4-you-hua-qi&quot;&gt;1.3.4 优化器&lt;&#x2F;h3&gt;
&lt;p&gt;经过了分析器，MySQL 就知道你要做什么了。在开始执行之前，还要先经过优化器的处理。&lt;&#x2F;p&gt;
&lt;p&gt;优化器是在表里面有多个索引的时候，决定使用哪个索引；或者在一个语句有多表关联（join）的时候，决定各个表的连接顺序。比如你执行下面这样的语句，这个语句是执行两个表的 join：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mysql&lt;&#x2F;span&gt;&lt;span&gt;&amp;gt; select * from t1 join t2 using(ID)  &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; t1.c=10 and t2.d=20;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;ul&gt;
&lt;li&gt;既可以先从表 t1 里面取出 c=10 的记录的 ID 值，再根据 ID 值关联到表 t2，再判断 t2 里面 d 的值是否等于 20。&lt;&#x2F;li&gt;
&lt;li&gt;也可以先从表 t2 里面取出 d=20 的记录的 ID 值，再根据 ID 值关联到 t1，再判断 t1 里面 c 的值是否等于 10。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;这两种执行方法的逻辑结果是一样的，但是执行的效率会有不同，而优化器的作用就是决定选择使用哪一个方案。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;1-3-5-zhi-xing-qi&quot;&gt;1.3.5 执行器&lt;&#x2F;h3&gt;
&lt;p&gt;MySQL 通过分析器知道了你要做什么，通过优化器知道了该怎么做，于是就进入了执行器阶段，开始执行语句。&lt;&#x2F;p&gt;
&lt;p&gt;开始执行的时候，要先判断一下你对这个表 T 有没有执行查询的权限，如果没有，就会返回没有权限的错误，如下所示 (在工程实现上，如果命中查询缓存，会在查询缓存返回结果的时候，做权限验证。查询也会在优化器之前调用 precheck 验证权限)。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#282c34;color:#abb2bf;&quot;&gt;&lt;code&gt;&lt;span&gt;mysql&amp;gt; select * from T where ID=10;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;ERROR 1142 (42000): SELECT command denied to user &amp;#39;b&amp;#39;@&amp;#39;localhost&amp;#39; for table &amp;#39;T&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;如果有权限，就打开表继续执行。打开表的时候，执行器就会根据表的引擎定义，去使用这个引擎提供的接口。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;2-mysql-de-shi-wu&quot;&gt;2. MySQL 的事务&lt;&#x2F;h1&gt;
&lt;p&gt;事务就是一组原子性的 SQL 查询语句，或者说一个独立的工作单元。如果数据库引擎能够成功地对数据应用该组查询的全部语句，那么就执行该组查询。如果其中任何一条语句因为崩溃或其他原因无法执行，那么所有语句都不会执行。也就是说，事务内的语句，要么全部执行成功，要么不执行。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;2-1-shi-wu-de-si-da-te-xing-acid&quot;&gt;2.1 事务的四大特性（ACID）&lt;&#x2F;h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;原子性（atomicity）：一个事务必须视为一个不可分割的最小工作单元，整个事务中的所有操作要么全部提交成功，要么全部失败回滚，对于一个事务来说，不可能只执行其中的一部分操作，这就是事务的原子性。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;一致性（consistency）：数据库总数从一个一致性的状态转换到另一个一致性的状态。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;隔离性（isolation）：一个事务所做的修改在最终提交以前，对其他事务是不可见的。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;持久性（durability）：一旦事务提交，则其所做的修改就会永久保存到数据库中。此时即使系统崩溃，修改的数据也不会丢失。&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;2-2-ge-chi-ji-bie&quot;&gt;2.2 隔离级别&lt;&#x2F;h2&gt;
&lt;p&gt;数据库事务的隔离级别有 4 种，由低到高分别为 Read uncommitted 、Read committed 、Repeatable read 、Serializable 。而且，在事务的并发操作中可能会出现脏读，不可重复读，幻读。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;ANSI SQL&lt;&#x2F;code&gt; 隔离级&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;隔离级&lt;&#x2F;th&gt;&lt;th&gt;脏读可能性&lt;&#x2F;th&gt;&lt;th&gt;不可重复读可能性&lt;&#x2F;th&gt;&lt;th&gt;幻读可能性&lt;&#x2F;th&gt;&lt;th&gt;加锁读&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;Read uncommitted&lt;&#x2F;td&gt;&lt;td&gt;是&lt;&#x2F;td&gt;&lt;td&gt;是&lt;&#x2F;td&gt;&lt;td&gt;是&lt;&#x2F;td&gt;&lt;td&gt;否&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Read committed&lt;&#x2F;td&gt;&lt;td&gt;否&lt;&#x2F;td&gt;&lt;td&gt;是&lt;&#x2F;td&gt;&lt;td&gt;是&lt;&#x2F;td&gt;&lt;td&gt;否&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Repeatable read&lt;&#x2F;td&gt;&lt;td&gt;否&lt;&#x2F;td&gt;&lt;td&gt;否&lt;&#x2F;td&gt;&lt;td&gt;是&lt;&#x2F;td&gt;&lt;td&gt;否&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;Serializable&lt;&#x2F;td&gt;&lt;td&gt;否&lt;&#x2F;td&gt;&lt;td&gt;否&lt;&#x2F;td&gt;&lt;td&gt;否&lt;&#x2F;td&gt;&lt;td&gt;是&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h1 id=&quot;3-si-suo&quot;&gt;3. 死锁&lt;&#x2F;h1&gt;
&lt;h2 id=&quot;3-1-ji-ben-gai-nian&quot;&gt;3.1 基本概念&lt;&#x2F;h2&gt;
&lt;p&gt;死锁是指两个或者多个事务在同一资源上相互占用，并请求锁定对
方占用的资源，从而导致恶性循环的现象。当多个事务试图以不同的顺
序锁定资源时，就可能会产生死锁。多个事务同时锁定同一个资源时，
也会产生死锁。例如，下面两个事务同时处理 &lt;code&gt;StockPrice&lt;&#x2F;code&gt; 可能产生死锁：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 事务1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;START&lt;&#x2F;span&gt;&lt;span&gt; TRANSACTION;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;UPDATE&lt;&#x2F;span&gt;&lt;span&gt; StockPrice SET close = 45.50 WHERE stock_id = 4 and date = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;2002-05-01&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;UPDATE&lt;&#x2F;span&gt;&lt;span&gt; StockPrice SET close = 19.80 WHERE stock_id = 3 and date = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;2002-05-02&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;COMMIT&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 事务2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;START&lt;&#x2F;span&gt;&lt;span&gt; TRANSACTION;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;UPDATE&lt;&#x2F;span&gt;&lt;span&gt; StockPrice SET high = 20.12 WHERE stock_id = 3 and date = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;2002-05-01&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;UPDATE&lt;&#x2F;span&gt;&lt;span&gt; StockPrice SET high = 47.20 WHERE stock_id = 4 and date = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;2002-05-02&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;COMMIT&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;3-2-si-suo-jie-jue-fang-shi&quot;&gt;3.2 死锁解决方式&lt;&#x2F;h2&gt;
&lt;p&gt;为了解决这种问题，数据库系统实现了各种死锁检测和死锁超时机制。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;越复杂的系统，比如&lt;code&gt;InnoDB&lt;&#x2F;code&gt;存储引擎，可以检测&#x2F;预知到死锁的循环依赖，并立即返回一个错误。这种解决方式很有效，否则死锁会导致出现非常慢的查询。&lt;&#x2F;li&gt;
&lt;li&gt;还有一种解决方式，就是当查询的时间达到锁等待超时的设定后放弃锁请求，这种方式通常来说不太好。&lt;&#x2F;li&gt;
&lt;li&gt;InnoDB 目前处理死锁的方法是，将持有最少行级排他锁的事务进行回滚（这是相对比较简
单的死锁回滚算法）。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h1 id=&quot;4-shi-wu-ri-zhi&quot;&gt;4. 事务日志&lt;&#x2F;h1&gt;
&lt;p&gt;事务日志可以帮助提高事务的效率。使用事务日志，存储引擎在修改表的数据时只需要修改其内存拷贝，再把该修改行为记录到持久在硬盘上的事务日志中，而不用每次都将修改的数据本身持久到磁盘。事务日志采用的是追加的方式，因此写日志的操作是磁盘上一小块区域内的顺序 I&#x2F;O，而不像随机 I&#x2F;O 需要在磁盘的多个地方移动磁头，所以采用事务日志的方式相对来说要快得多。事务日志持久以后，内存中被修改的数据在后台可以慢慢地刷回到磁盘。目前大多数存储引擎都是这样实现的，我们通常称之为预写式日志&lt;code&gt;(Write-Ahead Logging)&lt;&#x2F;code&gt;，修改数据需要写两次磁盘。&lt;&#x2F;p&gt;
&lt;p&gt;如果数据的修改已经记录到事务日志并持久化，但数据本身还没有写回磁盘，此时系统崩溃，存储引擎在重启时能够自动恢复这部分修改的数据。具体的恢复方式则视存储引擎而定。&lt;&#x2F;p&gt;
&lt;h1 id=&quot;5-mvcc&quot;&gt;5. MVCC&lt;&#x2F;h1&gt;
&lt;p&gt;可以认为 MVCC 是行级锁的一个变种，但是它在很多情况下避免了加锁操作，因此开销更低。虽然实现机制有所不同，但大都实现了非阻塞的读操作，写操作也只锁定必要的行。&lt;&#x2F;p&gt;
&lt;p&gt;MVCC 的实现，是通过保存数据在某个时间点的快照来实现的。也就是说，不管需要执行多长时间，每个事务看到的数据都是一致的。因为根据事务开始的时间不同，每个事务对同一张表，同一时刻看到的数据可能是不一样的。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;InnoDB&lt;&#x2F;code&gt;的&lt;code&gt;MVCC&lt;&#x2F;code&gt;实现方式:&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
通过在每行记录后面保存两个隐藏的列来实现的。这两个列，一个保存了行的创建时间，一个保存行的过期时间（或删除时间）。当然存储的并不是实际的时间值，而是系统版本号
&lt;code&gt;（system version number）&lt;&#x2F;code&gt;。每开始一个新的事务，系统版本号都会自动递增。事务开始时刻的系统版本号会作为事务的版本号，用来和查询到的每行记录的版本号进行比较。下面看一下在&lt;code&gt;REPEATABLE READ &lt;&#x2F;code&gt;隔离级别下，MVCC 具体是如何操作的。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;5-1-select&quot;&gt;5.1 SELECT&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;InnoDB 会根据以下两个条件检查每行记录：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;a. &lt;code&gt;InnoDB&lt;&#x2F;code&gt;只查找版本早于当前事务版本的数据行（也就是，行的系统版本号小于或等于事务的系统版本号），这样可以确保事务读取的行，要么是在事务开始前已经存在的，要么是事务自身插入或者修改过的。&lt;&#x2F;p&gt;
&lt;p&gt;b. 行的删除版本要么未定义，要么大于当前事务版本号。这可以确保事务读取到的行，在事务开始之前未被删除。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;5-2-insert&quot;&gt;5.2 INSERT&lt;&#x2F;h2&gt;
&lt;p&gt;InnoDB 为新插入的每一行保存当前系统版本号作为行版本号。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;5-3-delete&quot;&gt;5.3 DELETE&lt;&#x2F;h2&gt;
&lt;p&gt;InnoDB 为删除的每一行保存当前系统版本号作为行删除标识。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;5-4-update&quot;&gt;5.4 UPDATE&lt;&#x2F;h2&gt;
&lt;p&gt;InnoDB 为插入一行新记录，保存当前系统版本号作为行版本号，同时保存当前系统版本号到原来的行作为行删除标识。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;优缺点&lt;&#x2F;strong&gt;：&lt;&#x2F;p&gt;
&lt;p&gt;保存这两个额外系统版本号，使大多数读操作都可以不用加锁。这样设计使得读数据操作很简单，性能很好，并且也能保证只会读取到符合标准的行。不足之处是每行记录都需要额外的存储空间，需要做更多的行检查工作，以及一些额外的维护工作。&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Python基础学习</title>
        <published>2020-09-21T00:00:00+00:00</published>
        <updated>2020-09-21T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://poltao.github.io/posts/python-basic/"/>
        <id>https://poltao.github.io/posts/python-basic/</id>
        
        <content type="html" xml:base="https://poltao.github.io/posts/python-basic/">&lt;h2 id=&quot;yi-kai-fa-huan-jing&quot;&gt;一、开发环境&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-an-zhuang-yi-lai-ku&quot;&gt;1.安装依赖库&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;yum -y&lt;&#x2F;span&gt;&lt;span&gt; install zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-xia-zai-an-zhuang-bao&quot;&gt;2.下载安装包&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# wget下载安装包并解压至 &#x2F;usr&#x2F;local&#x2F;python3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;wget&lt;&#x2F;span&gt;&lt;span&gt; https:&#x2F;&#x2F;www.python.org&#x2F;ftp&#x2F;python&#x2F;3.7.0&#x2F;Python-3.7.0.tgz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;tar -C&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;local&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt; -xzvf&lt;&#x2F;span&gt;&lt;span&gt; Python-3.7.0.tgz
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;cd&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;local&#x2F;Python-3.7.0
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-pei-zhi-yu-an-zhuang&quot;&gt;3.配置与安装&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;.&#x2F;configure --prefix&lt;&#x2F;span&gt;&lt;span&gt;=&#x2F;usr&#x2F;local&#x2F;python3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;make &lt;&#x2F;span&gt;&lt;span&gt;&amp;amp;&amp;amp; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt; install
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 上面的参数，--prefix 是预期安装目录，--enable-optimizations 是优化选项（LTO，PGO 等）加上这个 flag 编译后，性能有 10% 左右的优化，但是这会明显的增加编译时间。
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 安装成功会提示如下消息:
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Collecting&lt;&#x2F;span&gt;&lt;span&gt; setuptools
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Collecting&lt;&#x2F;span&gt;&lt;span&gt; pip
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Installing&lt;&#x2F;span&gt;&lt;span&gt; collected packages: setuptools, pip
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Successfully&lt;&#x2F;span&gt;&lt;span&gt; installed pip-10.0.1 setuptools-39.0.1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;4-chuang-jian-ruan-lian-jie&quot;&gt;4.创建软链接&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ln -s&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;python3.7 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;python3
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ln -s&lt;&#x2F;span&gt;&lt;span&gt; &#x2F;usr&#x2F;local&#x2F;python3&#x2F;bin&#x2F;pip3.7 &#x2F;usr&#x2F;local&#x2F;bin&#x2F;pip3
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;5-zheng-que-shi-yong-vim-bian-xie-di-yi-ge-python-cheng-xu&quot;&gt;5.正确使用 vim 编写第一个 python 程序&lt;&#x2F;h3&gt;
&lt;p&gt;首先在 ~&#x2F;.vimrc 配置 python 缩进：&lt;code&gt;autocmd FileType python set tabstop=4 | set expandtab | set autoindent&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
示例程序：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;#!&#x2F;usr&#x2F;local&#x2F;bin&#x2F;python3
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# -*- coding:utf-8 -*-
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;x &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;x % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(x)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;6-ke-bian-dui-xiang-yu-bu-ke-bian-dui-xiang&quot;&gt;6.可变对象与不可变对象&lt;&#x2F;h3&gt;
&lt;ul&gt;
&lt;li&gt;可变对象：list dict set&lt;&#x2F;li&gt;
&lt;li&gt;不可变对象：tuple string int float bool&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;zhuanlan.zhihu.com&#x2F;p&#x2F;34395671&quot;&gt;可变对象与不可变对象比较&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;er-yun-suan-fu&quot;&gt;二、运算符&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-ge-shi-hua-shu-chu-s-yu-f-exp&quot;&gt;1. 格式化输出——%s 与 f&#x27;{exp}&#x27;&lt;&#x2F;h3&gt;
&lt;p&gt;格式化字符串除了%s，还可以写为 f&#x27;{表达式}&#x27;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;Tom&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;years = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1998
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;, Year = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;%d&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;% (name, years))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;name = &lt;&#x2F;span&gt;&lt;span&gt;{name}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;, Year = &lt;&#x2F;span&gt;&lt;span&gt;{years}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-shu-ju-lei-xing-zhuan-huan&quot;&gt;2. 数据类型转换&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;2-1-input&quot;&gt;2.1 input&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
当程序执⾏到 input ，等待⽤户输⼊，输⼊完成之后才继续向下执⾏。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
在 Python 中， input 接收⽤户输⼊后，⼀般存储到变量，⽅便使⽤。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot; checked=&quot;&quot;&#x2F;&gt;
在 Python 中， input 会把接收到的任意⽤户输⼊的数据都当做字符串处理。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;2-2-zhuan-huan-shu-ju-lei-xing-de-han-shu&quot;&gt;2.2 转换数据类型的函数&lt;&#x2F;h4&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;函数&lt;&#x2F;th&gt;&lt;th&gt;说明&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&lt;font color=yelloerw&gt;int(x [,base ])&lt;&#x2F;td&gt;&lt;td&gt;将 x 转换为⼀个整数&lt;&#x2F;font&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;font color=yelloerw&gt;float(x )&lt;&#x2F;td&gt;&lt;td&gt;将 x 转换为⼀个浮点数&lt;&#x2F;font&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;font color=yelloerw&gt;str(x )&lt;&#x2F;td&gt;&lt;td&gt;将对象 x 转换为字符串&lt;&#x2F;font&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;font color=yelloerw&gt;eval(str )&lt;&#x2F;td&gt;&lt;td&gt;⽤来计算在字符串中的有效 Python 表达式,并返回⼀个对象&lt;&#x2F;font&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;font color=yelloerw&gt;tuple(s )&lt;&#x2F;td&gt;&lt;td&gt;将序列 s 转换为⼀个元组&lt;&#x2F;font&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;&lt;font color=yelloerw&gt;list(s )&lt;&#x2F;td&gt;&lt;td&gt;将序列 s 转换为⼀个列表 &lt;&#x2F;font&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;chr(x )&lt;&#x2F;td&gt;&lt;td&gt;将⼀个整数转换为⼀个 Unicode 字符&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;ord(x )&lt;&#x2F;td&gt;&lt;td&gt;将⼀个字符转换为它的 ASCII 整数值&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;hex(x )&lt;&#x2F;td&gt;&lt;td&gt;将⼀个整数转换为⼀个⼗六进制字符串&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;oct(x )&lt;&#x2F;td&gt;&lt;td&gt;将⼀个整数转换为⼀个⼋进制字符串&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;bin(x )&lt;&#x2F;td&gt;&lt;td&gt;将⼀个整数转换为⼀个⼆进制字符串&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;complex(real [,imag ])&lt;&#x2F;td&gt;&lt;td&gt;创建⼀个复数，real 为实部，imag 为虚部&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;repr(x )&lt;&#x2F;td&gt;&lt;td&gt;将对象 x 转换为表达式字符串&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;2-3-shi-li&quot;&gt;2.3 示例&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 1. float() -- 转换成浮点型
&lt;&#x2F;span&gt;&lt;span&gt;num1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;(num1))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;float&lt;&#x2F;span&gt;&lt;span&gt;(num1)))
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 2. str() -- 转换成字符串类型
&lt;&#x2F;span&gt;&lt;span&gt;num2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span&gt;(num2)))
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 3. tuple() -- 将⼀个序列转换成元组
&lt;&#x2F;span&gt;&lt;span&gt;list1 = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;tuple&lt;&#x2F;span&gt;&lt;span&gt;(list1))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;tuple&lt;&#x2F;span&gt;&lt;span&gt;(list1)))
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 4. eval() -- 将字符串中的数据转换成Python表达式原本类型
&lt;&#x2F;span&gt;&lt;span&gt;str1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;10&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;str2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;[1, 2, 3]&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;str3 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;(1000, 2000, 3000)&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;eval&lt;&#x2F;span&gt;&lt;span&gt;(str1)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;eval&lt;&#x2F;span&gt;&lt;span&gt;(str2)))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;type&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;eval&lt;&#x2F;span&gt;&lt;span&gt;(str3)))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-yun-suan-fu&quot;&gt;3. 运算符&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;3-1-fen-lei&quot;&gt;3.1 分类&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;算数运算符&lt;&#x2F;li&gt;
&lt;li&gt;赋值运算符&lt;&#x2F;li&gt;
&lt;li&gt;复合赋值运算符&lt;&#x2F;li&gt;
&lt;li&gt;⽐较运算符&lt;&#x2F;li&gt;
&lt;li&gt;逻辑运算符&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;3-2-py-feng-ge-de-yun-suan-fu&quot;&gt;3.2 py 风格的运算符&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;算数运算符&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;运算符&lt;&#x2F;th&gt;&lt;th&gt;描述&lt;&#x2F;th&gt;&lt;th&gt;实例&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;&#x2F;&#x2F;&lt;&#x2F;td&gt;&lt;td&gt;整除&lt;&#x2F;td&gt;&lt;td&gt;9 &#x2F;&#x2F; 4 输出结果为 2&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;**&lt;&#x2F;td&gt;&lt;td&gt;指数&lt;&#x2F;td&gt;&lt;td&gt;2 ** 4 输出结果为 16，即 &lt;code&gt;2*2*2*2&lt;&#x2F;code&gt;&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;&lt;strong&gt;逻辑运算符&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;运算符&lt;&#x2F;th&gt;&lt;th&gt;描述&lt;&#x2F;th&gt;&lt;th&gt;实例&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;and&lt;&#x2F;td&gt;&lt;td&gt;逻辑与&lt;&#x2F;td&gt;&lt;td&gt;True and False， 返回 False&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;or&lt;&#x2F;td&gt;&lt;td&gt;逻辑或&lt;&#x2F;td&gt;&lt;td&gt;False or True， 返回 True&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;not&lt;&#x2F;td&gt;&lt;td&gt;逻辑非&lt;&#x2F;td&gt;&lt;td&gt;not True 返回 False&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;3-3-tuo-zhan&quot;&gt;3.3 拓展&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;数字之间的逻辑运算&lt;&#x2F;strong&gt;&lt;br &#x2F;&gt;
&lt;font color=red&gt;and 运算符，只要有⼀个值为 0，则结果为 0，否则结果为最后⼀个⾮ 0 数字&lt;br &#x2F;&gt;
or 运算符，只有所有值为 0 结果才为 0，否则结果为第⼀个⾮ 0 数字&lt;&#x2F;font&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;a = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;b = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1
&lt;&#x2F;span&gt;&lt;span&gt;c = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# and运算符，只要有⼀个值为0，则结果为0，否则结果为最后⼀个⾮0数字
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span&gt;b)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 0
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span&gt;c)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(c &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span&gt;b)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# or运算符，只有所有值为0结果才为0，否则结果为第⼀个⾮0数字
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span&gt;b)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 1
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(a &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span&gt;c)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 2
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(b &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;or &lt;&#x2F;span&gt;&lt;span&gt;c)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 1
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;san-zi-fu-chuan&quot;&gt;三、字符串&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-xiu-gai-zi-fu-chuan-da-xiao-xie&quot;&gt;1. 修改字符串大小写&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;firstName = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;ada&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;lastName = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;LOVER&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(firstName.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;() + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39; &amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;+ lastName.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;())  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# Ada Lover
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(firstName.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;upper&lt;&#x2F;span&gt;&lt;span&gt;())  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# ADA
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(lastName.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;lower&lt;&#x2F;span&gt;&lt;span&gt;())  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# lover
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-shan-chu-kong-bai&quot;&gt;2. 删除空白&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;favoriteLan = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39; python3 &amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(favoriteLan.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;lstrip&lt;&#x2F;span&gt;&lt;span&gt;())  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# &amp;#39;python3 &amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(favoriteLan.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;rstrip&lt;&#x2F;span&gt;&lt;span&gt;())  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# &amp;#39; python3&amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(favoriteLan.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;strip&lt;&#x2F;span&gt;&lt;span&gt;())  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# &amp;#39;python3&amp;#39;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-zi-fu-chuan-chang-du&quot;&gt;3. 字符串长度&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;favoriteLan = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39; python3 &amp;#39;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(favoriteLan.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;__len__&lt;&#x2F;span&gt;&lt;span&gt;())  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 9
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span&gt;(favoriteLan))  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 9
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;4-if-shi-li-cheng-xu&quot;&gt;4. if 示例程序&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;cars = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;audi&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;bmw&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;subaru&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;toyota&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;car &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;cars:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;car == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;bmw&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(car.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;upper&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(car.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;5-tiao-jian-ce-shi&quot;&gt;5. 条件测试&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;and, or, in, not in&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;cars = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;audi&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;bmw&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;subaru&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;toyota&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# and
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;cars[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;lower&lt;&#x2F;span&gt;&lt;span&gt;() == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;audi&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;and &lt;&#x2F;span&gt;&lt;span&gt;cars[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;bo&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# True
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;elif &lt;&#x2F;span&gt;&lt;span&gt;cars[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;] == &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;bmw&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(cars[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;())  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# Bmw
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# in
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;audi&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;cars)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# True
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;bo&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;cars)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# False
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# not in
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;bo&amp;#39; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;not in &lt;&#x2F;span&gt;&lt;span&gt;cars)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# True
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;si-lie-biao&quot;&gt;四、列表&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-lie-biao&quot;&gt;1. 列表&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;bicycles = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;trek&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;cannondale&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;redline&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;speci&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(bicycles)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# [&amp;#39;trek&amp;#39;, &amp;#39;cannondale&amp;#39;, &amp;#39;redline&amp;#39;, &amp;#39;speci&amp;#39;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-zeng-jia-yuan-su&quot;&gt;2. 增加元素&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# add
&lt;&#x2F;span&gt;&lt;span&gt;bicycles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;hongqi&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(bicycles)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# [&amp;#39;trek&amp;#39;, &amp;#39;cannondale&amp;#39;, &amp;#39;redline&amp;#39;, &amp;#39;speci&amp;#39;, &amp;#39;hongqi&amp;#39;]
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# insert
&lt;&#x2F;span&gt;&lt;span&gt;bicycles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;beijing&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(bicycles)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# [&amp;#39;beijing&amp;#39;, &amp;#39;trek&amp;#39;, &amp;#39;cannondale&amp;#39;, &amp;#39;redline&amp;#39;, &amp;#39;speci&amp;#39;, &amp;#39;hongqi&amp;#39;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-shan-chu-yuan-su&quot;&gt;3. 删除元素&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;bicycles = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;trek&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;redline&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;speci&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(bicycles)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# [&amp;#39;trek&amp;#39;, &amp;#39;redline&amp;#39;, &amp;#39;speci&amp;#39;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;3-1-shi-yong-del-yu-ju-shan-chu-yuan-su&quot;&gt;3.1 使用 del 语句删除元素&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;del &lt;&#x2F;span&gt;&lt;span&gt;bicycles[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(bicycles)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# [&amp;#39;redline&amp;#39;, &amp;#39;speci&amp;#39;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;3-2-shi-yong-fang-fa-pop-shan-chu-yuan-su&quot;&gt;3.2 使用方法 pop 删除元素&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;bics = bicycles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(bics)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# redline
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(bicycles)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# [&amp;#39;trek&amp;#39;, &amp;#39;speci&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;bicycles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(bicycles)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# [&amp;#39;trek&amp;#39;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;3-3-gen-ju-zhi-shan-chu-yuan-su&quot;&gt;3.3 根据值删除元素&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;bicycles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;remove&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;speci&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(bicycles)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# [&amp;#39;trek&amp;#39;, &amp;#39;redline&amp;#39;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;font color = red&gt; remove 方法只删除第一个指定的值&lt;&#x2F;font&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-zu-zhi-lie-biao&quot;&gt;4. 组织列表&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;4-1-sort-yong-jiu-xing-pai-xu&quot;&gt;4.1 sort 永久性排序&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;bicycles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(bicycles)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# [&amp;#39;redline&amp;#39;, &amp;#39;speci&amp;#39;, &amp;#39;trek&amp;#39;]
&lt;&#x2F;span&gt;&lt;span&gt;bicycles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sort&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;reverse&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(bicycles)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# [&amp;#39;trek&amp;#39;, &amp;#39;speci&amp;#39;, &amp;#39;redline&amp;#39;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;4-2-sorted-han-shu-lin-shi-dui-lie-biao-pai-xu&quot;&gt;4.2 sorted 函数临时对列表排序&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;sorted&lt;&#x2F;span&gt;&lt;span&gt;(bicycles))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;sorted&lt;&#x2F;span&gt;&lt;span&gt;(bicycles, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;reverse&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;True&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;4-3-reverse-fang-fa-fan-zhuan-lie-biao&quot;&gt;4.3 reverse 方法反转列表&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;bicycles.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;reverse&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(bicycles)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# [&amp;#39;speci&amp;#39;, &amp;#39;redline&amp;#39;, &amp;#39;trek&amp;#39;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;5-cao-zuo-lie-biao&quot;&gt;5. 操作列表&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;5-1-lie-biao-jie-xi&quot;&gt;5.1 列表解析&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;font color = red&gt;列表解析将 for 循环和创建新元素的代码合并为一行，并自动附加新元素&lt;&#x2F;font&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;numbers = [value ** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(numbers)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;5-2-lie-biao-qie-pian&quot;&gt;5.2 列表切片&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;指定范围切片：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;numbers = [value ** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(numbers)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(numbers[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;])  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# [1, 4]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(numbers[:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;])  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# [1, 4, 9, 16]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(numbers[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;:])  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# [36, 49, 64, 81, 100]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(numbers[-&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span&gt;:])  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# [64, 81, 100]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;遍历切片：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;numbers = [value ** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;11&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(numbers)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;numbers[:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;]:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(val, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 1 4 9 16
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;5-3-fu-zhi-lie-biao&quot;&gt;5.3 复制列表&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;font color = red&gt;必须使用整个列表切片的方法来确保复制的是列表的副本，而不是使用 &#x27;=&#x27;进行复制&lt;&#x2F;font&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;numbers = [value ** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;myNumbers = numbers[:]
&lt;&#x2F;span&gt;&lt;span&gt;numbers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;36&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;myNumbers.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;49&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(numbers)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# [1, 4, 9, 16, 25, 36]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(myNumbers)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# [1, 4, 9, 16, 25, 49]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;6-yuan-zu&quot;&gt;6. 元组&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;font color = red&gt;Python 将不能修改的值称为不可变的， 而不可变的列表被称为元组。
元组中元素虽然不可以被改变，但可以通过赋值的方法改变元组变量的值
&lt;&#x2F;font&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;numbers = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;tuple&lt;&#x2F;span&gt;&lt;span&gt;(value ** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(numbers)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# (1, 4, 9, 16, 25)
&lt;&#x2F;span&gt;&lt;span&gt;numbers = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;tuple&lt;&#x2F;span&gt;&lt;span&gt;(value ** &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(numbers)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# (1, 4, 9)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;wu-zi-dian&quot;&gt;五、字典&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-shi-li-cheng-xu&quot;&gt;1. 示例程序&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;alien = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;color&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;green&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;points&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 访问字典键-值对
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(alien[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;color&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(alien[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;points&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 添加键-值对
&lt;&#x2F;span&gt;&lt;span&gt;alien[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;x_position&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;alien[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;y_position&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;25
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(alien)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# {&amp;#39;color&amp;#39;: &amp;#39;green&amp;#39;, &amp;#39;points&amp;#39;: 5, &amp;#39;x_position&amp;#39;: 0, &amp;#39;y_position&amp;#39;: 25}
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 删除键-值对
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;del &lt;&#x2F;span&gt;&lt;span&gt;alien[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;points&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(alien)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# {&amp;#39;color&amp;#39;: &amp;#39;green&amp;#39;, &amp;#39;x_position&amp;#39;: 0, &amp;#39;y_position&amp;#39;: 25}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-bian-li-zi-dian&quot;&gt;2. 遍历字典&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;2-1-bian-li-suo-you-jian-zhi-dui&quot;&gt;2.1 遍历所有键值对&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;alien = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;x_position&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;y_position&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;key, value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;alien.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;Key = &lt;&#x2F;span&gt;&lt;span&gt;{key}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;, Value = &lt;&#x2F;span&gt;&lt;span&gt;{value}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 输出：
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# Key = x_position, Value = 0
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# Key = y_position, Value = 25
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;2-2-bian-li-zi-dian-suo-you-de-jian&quot;&gt;2.2 遍历字典所有的键&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;alien = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;x_position&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;y_position&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;names = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;list&lt;&#x2F;span&gt;&lt;span&gt;(alien.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(names)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# [&amp;#39;x_position&amp;#39;, &amp;#39;y_position&amp;#39;]
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;2-3-an-shun-xu-bian-li-zi-dian-zhong-de-suo-you-jian&quot;&gt;2.3 按顺序遍历字典中的所有键&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;alien = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;x_position&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;y_position&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;a&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;test1&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;b&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;test2&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;key &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;sorted&lt;&#x2F;span&gt;&lt;span&gt;(alien.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;keys&lt;&#x2F;span&gt;&lt;span&gt;()):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(key, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;2-4-bian-li-zi-dian-suo-you-de-zhi&quot;&gt;2.4 遍历字典所有的值&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;alien = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;x_position&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;y_position&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;a&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;test1&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;b&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;test2&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;value &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;alien.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;values&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(value)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-qian-tao&quot;&gt;3. 嵌套&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;3-1-zi-dian-lie-biao&quot;&gt;3.1 字典列表&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;font color=red&gt;即在列表中嵌套字典&lt;&#x2F;font&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;alien = {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;x_position&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;y_position&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;aliens = []
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;index &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;30&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    aliens.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(alien)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;app &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;aliens[:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span&gt;]:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(app)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;3-2-zi-dian-zhong-cun-chu-lie-biao&quot;&gt;3.2 字典中存储列表&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;favoriteLan = {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;jen&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;python&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;rust&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;sarah&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;c&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;edward&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;ruby&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;go&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;phil&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;shell&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;php&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;],
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;name, languages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;favoriteLan.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;+ name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;() + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&amp;#39;s favorite languages are: &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;language &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;languages:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\t&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;+ language.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;3-3-zi-dian-zhong-cun-chu-zi-dian&quot;&gt;3.3 字典中存储字典&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span&gt;users = {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;torvalds&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;first&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;linus&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;last&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;torvalds&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;location&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;finland&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    },
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;buterin&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;first&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;vitalik&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;last&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;buterin&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;,
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;location&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;russia&amp;#39;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;name, user &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;users.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Username: &lt;&#x2F;span&gt;&lt;span&gt;{name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;()}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;first: &lt;&#x2F;span&gt;&lt;span&gt;{user[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;first&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;()}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;, last: &lt;&#x2F;span&gt;&lt;span&gt;{user[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;last&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;()}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;, location: &lt;&#x2F;span&gt;&lt;span&gt;{user[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;location&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;()}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;输出：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;bash&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-bash &quot;&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Username:&lt;&#x2F;span&gt;&lt;span&gt; Torvalds
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;first:&lt;&#x2F;span&gt;&lt;span&gt; Linus, last: Torvalds, location: Finland
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Username:&lt;&#x2F;span&gt;&lt;span&gt; Buterin
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;first:&lt;&#x2F;span&gt;&lt;span&gt; Vitalik, last: Buterin, location: Russia
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;liu-han-shu&quot;&gt;六、函数&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-han-shu-shi-li&quot;&gt;1. 函数示例&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;greet_user&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;&amp;quot;&amp;quot;&amp;quot;greet example&amp;quot;&amp;quot;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Hello, &lt;&#x2F;span&gt;&lt;span&gt;{username.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;()}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;greet_user&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;siya&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(greet_user.__doc__)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-chuan-di-shi-can&quot;&gt;2. 传递实参&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;2-1-wei-zhi-shi-can&quot;&gt;2.1 位置实参&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;font color=red&gt;实参和形参完全对应的函数参数关联方式&lt;&#x2F;font&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;describe_pet&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;animal_type&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pet_name&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;I have a &lt;&#x2F;span&gt;&lt;span&gt;{animal_type}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;My &lt;&#x2F;span&gt;&lt;span&gt;{animal_type}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;s name is &lt;&#x2F;span&gt;&lt;span&gt;{pet_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;()}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;describe_pet&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;hamster&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;harry&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;2-2-guan-jian-zi-shi-can&quot;&gt;2.2 关键字实参&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;describe_pet&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;animal_type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;hamster&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pet_name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;harry&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;describe_pet&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pet_name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;harry&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;animal_type&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;hamster&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;2-3-mo-ren-zhi&quot;&gt;2.3 默认值&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;describe_pet&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;animal_type&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pet_name&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;harry&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;I have a &lt;&#x2F;span&gt;&lt;span&gt;{animal_type}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;My &lt;&#x2F;span&gt;&lt;span&gt;{animal_type}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;s name is &lt;&#x2F;span&gt;&lt;span&gt;{pet_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;()}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;describe_pet&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;hamster&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;vitalik&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;describe_pet&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;dog&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-fan-hui-zhi&quot;&gt;3. 返回值&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;get_formatted_name&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;first_name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;last_name&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    full_name = first_name + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39; &amp;#39; &lt;&#x2F;span&gt;&lt;span&gt;+ last_name
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;full_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;full_name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;get_formatted_name&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;vitalik&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;buterin&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(full_name)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# Vitalik Buterin
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;4-chuan-di-lie-biao&quot;&gt;4. 传递列表&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;aTob&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;nums1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;nums2&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;while &lt;&#x2F;span&gt;&lt;span&gt;nums1:
&lt;&#x2F;span&gt;&lt;span&gt;        nums2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;append&lt;&#x2F;span&gt;&lt;span&gt;(nums1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pop&lt;&#x2F;span&gt;&lt;span&gt;())
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;nums1 = [val * &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;val &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;range&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)]
&lt;&#x2F;span&gt;&lt;span&gt;nums2 = []
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;aTob&lt;&#x2F;span&gt;&lt;span&gt;(nums1[:], nums2)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;5-chuan-di-ren-yi-shu-liang-de-shi-can&quot;&gt;5. 传递任意数量的实参&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;5-1-shi-li-cheng-xu&quot;&gt;5.1 示例程序&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;aTob&lt;&#x2F;span&gt;&lt;span&gt;(*&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;nums&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(nums)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;aTob&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# (1, 2, 4)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;5-2-jie-he-shi-yong-wei-zhi-shi-can-yu-ren-yi-shu-liang-shi-can&quot;&gt;5.2 结合使用位置实参与任意数量实参&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;aTob&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;nums1&lt;&#x2F;span&gt;&lt;span&gt;, *&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;nums2&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(nums1)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(nums2)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;aTob&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 1
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# (2, 4)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;5-3-shi-yong-ren-yi-shu-liang-de-guan-jian-zi-shi-can&quot;&gt;5.3 使用任意数量的关键字实参&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;aTob&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;first&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;last&lt;&#x2F;span&gt;&lt;span&gt;, **&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;nums&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{first.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;()} {last.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;()}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(nums)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;aTob&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;vitalik&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;buterin&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;31&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sex&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;male&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# Vitalik Buterin.
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# {&amp;#39;age&amp;#39;: 31, &amp;#39;sex&amp;#39;: &amp;#39;male&amp;#39;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;qi-lei&quot;&gt;七、类&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-lei-shi-li&quot;&gt;1. 类示例&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Dog&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;age&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.name = name
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.age = age
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;sit&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;()}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt; is now sitting.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;roll_over&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;()}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt; rolled over.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;dog = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Dog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;vitalik&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;20&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;dog.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;sit&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;dog.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;roll_over&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;2-lei-de-ji-cheng&quot;&gt;2. 类的继承&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;2-1-ji-cheng-shi-li&quot;&gt;2.1 继承示例&lt;&#x2F;h4&gt;
&lt;p&gt;&lt;strong&gt;基类为 Car , 派生类为 ElectricCar&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Car&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;year&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.make = make
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.model = model
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.year = year
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.odometer_reading = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;0
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;get_descriptive_name&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        long_name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.year} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.make} {&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.model}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;long_name
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;read_odometer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;This car has &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.odometer_reading}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt; miles on it.&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;update_odometer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mileage&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span&gt;mileage &amp;gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.odometer_reading:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.odometer_reading = mileage
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;else&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;You can&amp;#39;t roll back an odometer!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;increment_odometer&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;miles&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.odometer_reading += miles
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;ElectricCar&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Car&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;make&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;model&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;year&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;super&lt;&#x2F;span&gt;&lt;span&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(make, model, year)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.battery_size = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;70
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;describe_battery&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;This car has a &lt;&#x2F;span&gt;&lt;span&gt;{&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.battery_size}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;-kWh battery&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;car = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ElectricCar&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;tesla&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;model s&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;2016&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;longName = car.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;get_descriptive_name&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(longName)  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 2016 tesla model s
&lt;&#x2F;span&gt;&lt;span&gt;car.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;describe_battery&lt;&#x2F;span&gt;&lt;span&gt;()  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# This car has a 70-kWh battery
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;2-2-zhong-xie-fu-lei-fang-fa&quot;&gt;2.2 重写父类方法&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Car&lt;&#x2F;span&gt;&lt;span&gt;:
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;fill_gas_tank&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;pass
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;ElectricCar&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Car&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;fill_gas_tank&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;This car doesn&amp;#39;t need a gas tank!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;car = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;ElectricCar&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;car.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fill_gas_tank&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-shi-yong-ordereddict-lei&quot;&gt;3. 使用 OrderedDict 类&lt;&#x2F;h3&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;collections &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;OrderedDict
&lt;&#x2F;span&gt;&lt;span&gt;favorite_languages = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;OrderedDict&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;favorite_languages[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;jen&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;python&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;rust&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;favorite_languages[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;sarah&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;c&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;favorite_languages[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;edward&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;ruby&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;go&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;favorite_languages[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;phil&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;] = [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;shell&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;php&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;]
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;name, languages &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;favorite_languages.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;items&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;\n&lt;&#x2F;span&gt;&lt;span&gt;{name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;()}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;s languages: &amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span&gt;language &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;in &lt;&#x2F;span&gt;&lt;span&gt;languages:
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;f&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;{language.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;()}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;end&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39; &amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;ba-gui-bian-cheng&quot;&gt;八、GUI 编程&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;1-gui-bian-cheng-ji-chu-tkinter&quot;&gt;1. GUI 编程基础(Tkinter)&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;strong&gt;常用 Python GUI 库如下：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Tkinter： Tkinter 模块(Tk 接口)是 Python 的标准 Tk GUI 工具包的接口 .Tk 和 Tkinter 可以在大多数的 Unix 平台下使用,同样可以应用在 Windows 和 Macintosh 系统里。Tk8.0 的后续版本可以实现本地窗口风格,并良好地运行在绝大多数平台中。&lt;&#x2F;li&gt;
&lt;li&gt;wxPython：wxPython 是一款开源软件，是 Python 语言的一套优秀的 GUI 图形库，允许 Python 程序员很方便的创建完整的、功能健全的 GUI 用户界面。&lt;&#x2F;li&gt;
&lt;li&gt;Jython：Jython 程序可以和 Java 无缝集成。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h4 id=&quot;1-1-tkinter-bian-cheng&quot;&gt;1.1 Tkinter 编程&lt;&#x2F;h4&gt;
&lt;p&gt;创建一个 GUI 程序:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;1、导入 Tkinter 模块&lt;&#x2F;li&gt;
&lt;li&gt;2、创建控件&lt;&#x2F;li&gt;
&lt;li&gt;3、指定这个控件的 master， 即这个控件属于哪一个&lt;&#x2F;li&gt;
&lt;li&gt;4、告诉 GM(geometry manager) 有一个控件产生了。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;&lt;strong&gt;示例：&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;py&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-py &quot;&gt;&lt;code class=&quot;language-py&quot; data-lang=&quot;py&quot;&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# This is a sample Python script.
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# Press Shift+F10 to execute it or replace it with your code.
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;tkinter
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;top = tkinter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Tk&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#5c6370;&quot;&gt;# 进入消息循环
&lt;&#x2F;span&gt;&lt;span&gt;top.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mainloop&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;执行之后显示：&lt;br &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2020&#x2F;10&#x2F;31&#x2F;BUxYqA.png&quot; alt=&quot;BUxYqA.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;1-2-tkinter-zu-jian&quot;&gt;1.2 Tkinter 组件&lt;&#x2F;h4&gt;
&lt;p&gt;目前有 15 种 Tkinter 的部件。我们提出这些部件以及一个简短的介绍，在下面的表:&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: center&quot;&gt;控件&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;描述&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.runoob.com&#x2F;python&#x2F;python-tk-button.html&quot;&gt;Button&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;按钮控件；在程序中显示按钮。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.runoob.com&#x2F;python&#x2F;python-tk-canvas.html&quot;&gt;Canvas&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;画布控件；显示图形元素如线条或文本&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.runoob.com&#x2F;python&#x2F;python-tk-checkbutton.html&quot;&gt;Checkbutton&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;多选框控件；用于在程序中提供多项选择框&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.runoob.com&#x2F;python&#x2F;python-tkinter-entry.html&quot;&gt;Entry&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;输入控件；用于显示简单的文本内容&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.runoob.com&#x2F;python&#x2F;python-tk-frame.html&quot;&gt;Frame&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;框架控件；在屏幕上显示一个矩形区域，多用来作为容器&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.runoob.com&#x2F;python&#x2F;python-tk-label.html&quot;&gt;Label&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;标签控件；可以显示文本和位图&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Listbox&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;列表框控件；在 Listbox 窗口小部件是用来显示一个字符串列表给用户&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Menubutton&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;菜单按钮控件，用于显示菜单项。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Menu&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;菜单控件；显示菜单栏,下拉菜单和弹出菜单&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Message&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;消息控件；用来显示多行文本，与 label 比较类似&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Radiobutton&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;单选按钮控件；显示一个单选的按钮状态&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Scale&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;范围控件；显示一个数值刻度，为输出限定范围的数字区间&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Scrollbar&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;滚动条控件，当内容超过可视化区域时使用，如列表框。.&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Text&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;文本控件；用于显示多行文本&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Toplevel&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;容器控件；用来提供一个单独的对话框，和 Frame 比较类似&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Spinbox&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;输入控件；与 Entry 类似，但是可以指定输入范围值&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;PanedWindow&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;PanedWindow 是一个窗口布局管理的插件，可以包含一个或者多个子控件。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;LabelFrame&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;labelframe 是一个简单的容器控件。常用与复杂的窗口布局。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;tkMessageBox&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;用于显示你应用程序的消息框。&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;1-3-biao-zhun-shu-xing&quot;&gt;1.3 标准属性&lt;&#x2F;h4&gt;
&lt;p&gt;标准属性也就是所有控件的共同属性，如大小，字体和颜色等等。&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: center&quot;&gt;属性&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;描述&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Dimension&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;控件大小；&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Color&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;控件颜色；&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Font&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;控件字体；&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Anchor&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;锚点；&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Relief&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;控件样式；&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Bitmap&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;位图；&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;Cursor&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;光标；&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h4 id=&quot;1-4-ji-he-guan-li&quot;&gt;1.4 几何管理&lt;&#x2F;h4&gt;
&lt;p&gt;Tkinter 控件有特定的几何状态管理方法，管理整个控件区域组织，以下是 Tkinter 公开的几何管理类：包、网格、位置&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th style=&quot;text-align: center&quot;&gt;几何方法&lt;&#x2F;th&gt;&lt;th style=&quot;text-align: center&quot;&gt;描述&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;pack()&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;包装；&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;grid()&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;网格；&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td style=&quot;text-align: center&quot;&gt;place()&lt;&#x2F;td&gt;&lt;td style=&quot;text-align: center&quot;&gt;位置；&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;h3 id=&quot;2-tkinter-bian-cheng-shi-zhan&quot;&gt;2. Tkinter 编程实战&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;2-1-frame-yu-pack-de-chu-ti-yan&quot;&gt;2.1 Frame 与 pack 的初体验&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;tkinter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;say_hi&lt;&#x2F;span&gt;&lt;span&gt;():
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;print&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;hello ~ !&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;root = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Tk&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;frame1 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Frame&lt;&#x2F;span&gt;&lt;span&gt;(root, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;bd&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;128&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;cursor&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;plus&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;bg&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;white&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;frame2 = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Frame&lt;&#x2F;span&gt;&lt;span&gt;(root, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;bd&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;128&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;cursor&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;circle&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;bg&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;pink&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;root.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;tkinter frame&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;label = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Label&lt;&#x2F;span&gt;&lt;span&gt;(frame1, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Label&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;bg&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;red&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;label.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pack&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fill&lt;&#x2F;span&gt;&lt;span&gt;=X)
&lt;&#x2F;span&gt;&lt;span&gt;hi_there = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Button&lt;&#x2F;span&gt;&lt;span&gt;(frame2, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;say hi~&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;=say_hi)
&lt;&#x2F;span&gt;&lt;span&gt;hi_there.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pack&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;frame1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pack&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;padx&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pady&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;side&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;RIGHT&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;frame2.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pack&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;padx&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pady&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;side&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;RIGHT&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;root.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mainloop&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;执行之后显示：&lt;br &#x2F;&gt;
&lt;img src=&quot;https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2020&#x2F;10&#x2F;31&#x2F;BaVaoF.md.png&quot; alt=&quot;BaVaoF.md.png&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;2-2-python-tkinter-wen-ben-kuang-entry&quot;&gt;2.2 Python Tkinter 文本框（Entry）&lt;&#x2F;h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;你如果需要输入多行文本，可以使用 Text 组件。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;你如果需要显示一行或多行文本且不允许用户修改，你可以使用 Label 组件。&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;tkinter
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;top = tkinter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Tk&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;top.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;emergency system&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;frame = tkinter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Frame&lt;&#x2F;span&gt;&lt;span&gt;(top, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;bd&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;256&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;bg&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;white&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;l1 = tkinter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Label&lt;&#x2F;span&gt;&lt;span&gt;(frame, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;name&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;w = tkinter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Entry&lt;&#x2F;span&gt;&lt;span&gt;(frame, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;bd&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;highlightcolor&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;red&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;fg&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;black&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;l1.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pack&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;side&lt;&#x2F;span&gt;&lt;span&gt;=tkinter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;LEFT&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;w.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pack&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;side&lt;&#x2F;span&gt;&lt;span&gt;=tkinter.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;LEFT&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;frame.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pack&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;padx&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pady&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;top.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mainloop&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;3-liao-xue-feng-tu-xing-bian-cheng-ru-men&quot;&gt;3. 廖雪峰图形编程入门&lt;&#x2F;h3&gt;
&lt;p&gt;加入一个文本框，让用户可以输入文本，然后点按钮后，弹出消息对话框。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;python&quot; style=&quot;background-color:#282c34;color:#abb2bf;&quot; class=&quot;language-python &quot;&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;from &lt;&#x2F;span&gt;&lt;span&gt;tkinter &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;*
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;import &lt;&#x2F;span&gt;&lt;span&gt;tkinter.messagebox &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;as &lt;&#x2F;span&gt;&lt;span&gt;messagebox
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e5c07b;&quot;&gt;Application&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;Frame&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;master&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;None&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        Frame.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#56b6c2;&quot;&gt;__init__&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, master, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;bd&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;128&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;bg&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;green&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pack&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;createWidgets&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;createWidgets&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.nameInput = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Entry&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;bd&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;12&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;bg&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;white&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.nameInput.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pack&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.quitButton = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Button&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;Quit&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.quit)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.helloButton = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Button&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;text&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;#39;hello&amp;#39;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;command&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.hello)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.helloButton.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pack&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;side&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;LEFT&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;padx&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pady&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.quitButton.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pack&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;side&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;LEFT&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;padx&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;pady&lt;&#x2F;span&gt;&lt;span&gt;=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;10&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c678dd;&quot;&gt;def &lt;&#x2F;span&gt;&lt;span style=&quot;color:#61afef;&quot;&gt;hello&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;):
&lt;&#x2F;span&gt;&lt;span&gt;        name = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;.nameInput.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;        messagebox.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;showinfo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Message&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Hello &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d19a66;&quot;&gt;%s&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span&gt;% name)
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;app = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;Application&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;app.master.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;title&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#98c379;&quot;&gt;&amp;quot;Hello World!&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;)
&lt;&#x2F;span&gt;&lt;span&gt;app.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#e06c75;&quot;&gt;mainloop&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;s1.ax1x.com&#x2F;2020&#x2F;10&#x2F;31&#x2F;BaYUw4.png&quot; alt=&quot;32&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;4-can-kao-zi-liao&quot;&gt;4. 参考资料&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;blog.csdn.net&#x2F;liuxu0703&#x2F;article&#x2F;details&#x2F;54428405&quot;&gt;[Tkinter 教程 12] 布局管理 (Pack Place Grid)&lt;&#x2F;a&gt;&lt;br &#x2F;&gt;
&lt;a href=&quot;https:&#x2F;&#x2F;www.cnblogs.com&#x2F;shwee&#x2F;p&#x2F;9427975.html&quot;&gt;Python GUI 之 tkinter 窗口视窗教程大集合（看这篇就够了）&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;jiu-yuan-lei&quot;&gt;九、元类&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.liaoxuefeng.com&#x2F;wiki&#x2F;1016959663602400&#x2F;1017592449371072&quot;&gt;廖雪峰使用元类&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cnblogs.com&#x2F;ArsenalfanInECNU&#x2F;p&#x2F;9036407.html&quot;&gt;谈谈 Python 中元类 Metaclass(一)：什么是元类&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cnblogs.com&#x2F;ArsenalfanInECNU&#x2F;p&#x2F;9100874.html&quot;&gt;谈谈 Python 中元类 Metaclass(二)：ORM 实践&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;www.cnblogs.com&#x2F;JetpropelledSnake&#x2F;p&#x2F;9094103.html&quot;&gt;深入理解 Python 中的元类(metaclass)&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
